{"file":"form-field-behavior-a15dc06a.js","mappings":"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","names":["log","debug","__decorate"],"sources":["./src/utils/lang/string.ts","./src/utils/lang/to-array.ts","./src/utils/lang/assign-by-form-data-path.ts","./src/utils/serialize-form.ts","./src/behaviors/form-behavior/form-behavior.ts","./src/behaviors/form-behavior/form-field-behavior.ts"],"sourcesContent":["export const dashToCamelCase = str => str.replace(/-([a-z])/g, g => g[1].toUpperCase());\r\n","export function toArray<T>(value: T | T[]): T[] {\r\n  return value ?\r\n    value instanceof Array ? value : [ value ]\r\n    : [];\r\n}\r\n","/**\r\n * Used to assign into a object field, accessing it by it Form Data Path,\r\n * commonly used in PHP's form data parsing engine.\r\n * @param target The target Object that will be assigned.\r\n * @param path The Form Data Path to assign the value. Ex: `user[name]`.\r\n * @param value The value of the field.\r\n */\r\nexport function assignByFormDataPath(target, path, value) {\r\n  const pathTokens = path.split(/\\[/).map(p => p.replace(/\\]/, ''));\r\n  let i;\r\n  let actualTarget = target;\r\n  let lastTarget = null;\r\n  for (i = 0; i < pathTokens.length; i++) {\r\n    if (/^(\\s*|\\d+)$/.test(pathTokens[i])) {\r\n      if (!(lastTarget[pathTokens[i - 1]] instanceof Array)) {\r\n        lastTarget[pathTokens[i - 1]] = [];\r\n      }\r\n\r\n      const tempActual = actualTarget;\r\n      actualTarget = lastTarget[pathTokens[i - 1]];\r\n      lastTarget = tempActual;\r\n      continue;\r\n    }\r\n    if (Array.isArray(actualTarget)) {\r\n      actualTarget.push(actualTarget[pathTokens[i]] || {});\r\n    } else {\r\n      actualTarget[pathTokens[i]] = actualTarget[pathTokens[i]] || {};\r\n    }\r\n\r\n    lastTarget = actualTarget;\r\n    actualTarget = actualTarget[pathTokens[i]];\r\n  }\r\n\r\n  if (actualTarget instanceof Array) {\r\n    actualTarget.push(value);\r\n  } else {\r\n    lastTarget[pathTokens[i - 1]] = value;\r\n  }\r\n  return target;\r\n}\r\n","import { assignByFormDataPath } from './lang/assign-by-form-data-path';\r\n\r\n/**\r\n * The options that can be passed to the serializeForm function.\r\n */\r\nexport interface SerializeFormOptions {\r\n  /**\r\n   * The function will ignore fields that has the disabled property.\r\n   */\r\n  ignoreDisabled?: boolean;\r\n}\r\n\r\n/**\r\n * Serialize a Form element to JSON.\r\n * @param form The target form element.\r\n * @param options A set of custom options.\r\n */\r\nexport function serializeForm(form: HTMLFormElement, options: SerializeFormOptions = {}) {\r\n  const obj = {};\r\n\r\n  Array.prototype.slice.call(form.querySelectorAll('[name]' + (options.ignoreDisabled ? ':not([disabled])' : '')))\r\n    .forEach(field => {\r\n      if (field.name && ['file', 'reset', 'button'].indexOf(field.type) === -1 && field.tagName.indexOf('-') === -1) {\r\n        switch (field.type) {\r\n          case 'select-multiple':\r\n            const options = [];\r\n            Array.prototype.slice.call(field.options).forEach(option => {\r\n              if (option.selected) { options.push(option.value); }\r\n            });\r\n            assignByFormDataPath(obj, field.name, options);\r\n            break;\r\n\r\n          case 'checkbox':\r\n            if (field.checked) { assignByFormDataPath(obj, field.name, true); }\r\n          case 'radio':\r\n            if (field.checked) { assignByFormDataPath(obj, field.name, field.value); }\r\n            break;\r\n\r\n          default:\r\n            if (field.value) { assignByFormDataPath(obj, field.name, field.value); }\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n  return obj;\r\n}\r\n","import debug from 'debug/src/browser';\r\n\r\nimport { Bind } from '../../utils/lang/bind';\r\nimport { SerializeFormOptions, serializeForm } from '../../utils/serialize-form';\r\nimport { ComponentBehavior } from '../../utils/stencil/component-behavior';\r\nimport { CustomValidityState } from '../../utils/validations/validations';\r\n\r\nimport { FormFieldBehavior } from './form-field-behavior';\r\n\r\nconst log = debug('solar:FormBehavior');\r\n\r\n/**\r\n * Extend form features.\r\n */\r\nexport class FormBehavior extends ComponentBehavior<any> {\r\n  /**\r\n   * Instantiate a FormBehavior for a native Form element.\r\n   * @param host The target Form element.\r\n   */\r\n  static forNative(host: HTMLElement) {\r\n    return new FormBehavior({\r\n      host,\r\n      preventUnsaved: host.dataset.hasOwnProperty('preventUnsaved'),\r\n      disconnectedCallback: null,\r\n      native: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * All field that compound this Form.\r\n   */\r\n  private fields = new Map<string, FormFieldBehavior>();\r\n\r\n  /**\r\n   * Prevent user to leave the screen.\r\n   */\r\n  private preventUnsavedIsAttached = false;\r\n\r\n  /**\r\n   * True if this form is valid.\r\n   */\r\n  isValid: boolean;\r\n\r\n  /**\r\n   * True if the user has changed any field from the form.\r\n   */\r\n  isUnchecked: boolean;\r\n\r\n  /**\r\n   * Runs all validations from formBehavior's fields.\r\n   * If it is valid, propagates the formSubmit event to other listeners\r\n   */\r\n  @Bind\r\n  private handleSubmit(ev) {\r\n    log('Submitting', this);\r\n    ev.preventDefault();\r\n    const currentValidation = !!this.isValid;\r\n\r\n    if (!currentValidation || this.isUnchecked) {\r\n      this.checkValidity()\r\n        .then(errors => {\r\n          if (Object.keys(errors).length === 0) {\r\n            this.component.host.dispatchEvent(new CustomEvent('formSubmit'));\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach a listener to 'submit' to the formBehavior,\r\n   * preventing the form submission if it is invalid.\r\n   */\r\n  attach() {\r\n    log('Initializing', this);\r\n    this.component.host.addEventListener('submit', this.handleSubmit);\r\n  }\r\n\r\n  detach() {\r\n    this.component.host.removeEventListener('submit', this.handleSubmit);\r\n  }\r\n\r\n  /**\r\n   * Set the form in the valid state.\r\n   */\r\n  setValid() {\r\n    log('Set valid', this);\r\n    this.isValid = true;\r\n    this.component.host.classList.remove('form--invalid');\r\n    this.component.host.classList.add('form--valid');\r\n  }\r\n\r\n  /**\r\n   * Set the form in the invalid state.\r\n   */\r\n  setInvalid() {\r\n    log('Set invalid', this);\r\n    this.isValid = false;\r\n    this.component.host.classList.remove('form--valid');\r\n    this.component.host.classList.add('form--invalid');\r\n  }\r\n\r\n  /**\r\n   * Set the form in the unchecked state.\r\n   */\r\n  setUnchecked() {\r\n    log('Set unchecked', this);\r\n    this.isUnchecked = true;\r\n    this.isValid = false;\r\n    this.component.host.classList.remove('form--valid', 'form--invalid');\r\n    this.component.host.classList.add('form--unchecked');\r\n\r\n    // Prevent close the page with unsaved changes.\r\n    if (!this.preventUnsavedIsAttached &&\r\n      (this.component.preventUnsaved || this.component.preventUnsaved === '')) {\r\n      log('Preventing Unsaved');\r\n      window.addEventListener('beforeunload', e => {\r\n        if (this.isUnchecked) {\r\n          const confirmationMessage = this.component.preventUnsaved;\r\n\r\n          (e || window.event).returnValue = confirmationMessage; // Gecko + IE\r\n          return confirmationMessage; // Gecko + Webkit, Safari, Chrome etc.\r\n        }\r\n      });\r\n      this.preventUnsavedIsAttached = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the form in the checked state.\r\n   */\r\n  setChecked() {\r\n    log('Set checked', this);\r\n    this.isUnchecked = false;\r\n    this.component.host.classList.remove('form--unchecked');\r\n  }\r\n\r\n  /**\r\n   * Cleans all the states, errors and values of the form.\r\n   */\r\n  cleanup() {\r\n    log('Cleaning', this);\r\n    this.pristine();\r\n    const fieldsAsArray = Array.from(this.fields.values());\r\n    fieldsAsArray.forEach(f => f.cleanup());\r\n  }\r\n\r\n  /**\r\n   * Set the form in the pristine state, preserving values, removing the validations and unchecked.\r\n   */\r\n  pristine() {\r\n    log('Set pristine', this);\r\n    this.isValid = false;\r\n    this.isUnchecked = false;\r\n    this.component.host.classList.remove('form--unchecked', 'form--valid', 'form--invalid');\r\n  }\r\n\r\n  /**\r\n   * Adds a field to this logic. Note that the field must have a name.\r\n   * @param field A component's FormFieldBehavior\r\n   */\r\n  addField(field: FormFieldBehavior) {\r\n    this.fields.set(field.name, field);\r\n  }\r\n\r\n  /**\r\n   * Remove a field from this logic.\r\n   * @param field A component's FormFieldBehavior\r\n   */\r\n  removeField(field: FormFieldBehavior) {\r\n    this.fields.delete(field.name);\r\n  }\r\n\r\n  /**\r\n   * Runs all field validations from the formBehavior.\r\n   */\r\n  async checkValidity(): Promise<FormValidationErrors> {\r\n    log('Validating formBehavior', this);\r\n\r\n    this.setChecked();\r\n    const fieldsAsArray = Array.from(this.fields.values());\r\n    const errors = {};\r\n\r\n    await Promise.all(fieldsAsArray\r\n      .map(f => f.checkValidity()\r\n        .then(state => {\r\n          if (!state.valid) {\r\n            errors[f.name] = state;\r\n          }\r\n        })\r\n      ));\r\n\r\n    if (Object.keys(errors).length === 0) {\r\n      this.setValid();\r\n    } else {\r\n      this.setInvalid();\r\n      this.component.host.dispatchEvent(\r\n        new CustomEvent('formInvalid', { detail: errors })\r\n      );\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  serialize(options?: SerializeFormOptions) {\r\n    log('Serializing', this.component.host, serializeForm(this.component.host, options));\r\n    return serializeForm(this.component.host, options);\r\n  }\r\n}\r\n\r\nexport interface FormValidationErrors {\r\n  [key: string]: {\r\n    errors: CustomValidityState\r\n  };\r\n}\r\n","import debug from 'debug/src/browser';\r\n\r\nimport { Bind } from '../../utils/lang/bind';\r\nimport { dashToCamelCase } from '../../utils/lang/string';\r\nimport { toArray } from '../../utils/lang/to-array';\r\nimport { ComponentBehavior } from '../../utils/stencil/component-behavior';\r\nimport { CustomValidityState, ValidatorFn } from '../../utils/validations/validations';\r\n\r\nimport { FormBehavior } from './form-behavior';\r\nimport { FormFieldComponent } from './form-field-component';\r\nimport { HTMLCustomFormElement } from './html-custom-form-element';\r\n\r\nconst log = debug('solar:FormFieldBehavior');\r\n\r\n/**\r\n * Adds form field features to a component, such as validations.\r\n */\r\nexport class FormFieldBehavior extends ComponentBehavior<FormFieldComponent> {\r\n\r\n  /**\r\n   * The form that this field is attached\r\n   */\r\n  private formAttached?: HTMLCustomFormElement;\r\n\r\n  /**\r\n   * The name of the field to use in the form.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * True if the value of this field is valid.\r\n   * Note that needs to call `validate` to ensure it.\r\n   */\r\n  isValid: boolean;\r\n\r\n  /**\r\n   * True if the user has interacted with this field before.\r\n   */\r\n  isTouched: boolean;\r\n\r\n  /**\r\n   * True if the user has changed this field's value before.\r\n   */\r\n  isDirty: boolean;\r\n\r\n  /**\r\n   * If this field is in a form, attach to it and initialize the FormLogic.\r\n   */\r\n  attach() {\r\n    this.name = this.component.name;\r\n    this.formAttached = this.component.host.closest('form') as HTMLCustomFormElement;\r\n\r\n    if (this.formAttached) {\r\n      log('Attaching', this.name, this.formAttached);\r\n      if (!this.formAttached.formBehavior) {\r\n        this.formAttached.formBehavior = FormBehavior.forNative(this.formAttached);\r\n      }\r\n      this.formAttached.formBehavior.addField(this);\r\n    }\r\n\r\n    this.component.host.addEventListener('invalid', this.checkValidity);\r\n  }\r\n\r\n  /**\r\n   * Removes this field from FormLogic, to ignore it validations.\r\n   */\r\n  detach() {\r\n    if (this.formAttached) {\r\n      log('Detaching', this.name, this.formAttached);\r\n      this.formAttached.formBehavior.removeField(this);\r\n    }\r\n\r\n    this.component.host.removeEventListener('invalid', this.checkValidity);\r\n  }\r\n\r\n  /**\r\n   * Set the field in the dirty state.\r\n   */\r\n  setDirty() {\r\n    log('Set dirty', this.name, this.formAttached);\r\n    this.component.host.classList.add('form-field--dirty');\r\n    this.isDirty = true;\r\n\r\n    if (this.formAttached) { this.formAttached.formBehavior.setUnchecked(); }\r\n  }\r\n\r\n  /**\r\n   * Set the field in the touched state.\r\n   */\r\n  setTouched() {\r\n    log('Set touched', this.name);\r\n    this.component.host.classList.add('form-field--touched');\r\n    this.isTouched = true;\r\n  }\r\n\r\n  /**\r\n   * Set the field in the valid state.\r\n   */\r\n  setValid() {\r\n    log('Set valid', this.name);\r\n    this.component.host.classList.add('form-field--valid');\r\n    this.component.host.classList.remove('form-field--invalid');\r\n\r\n    this.isValid = true;\r\n  }\r\n\r\n  /**\r\n   * Set the field in the invalid state\r\n   */\r\n  setInvalid() {\r\n    log('Set invalid', this.name);\r\n    this.component.host.classList.add('form-field--invalid');\r\n    this.component.host.classList.remove('form-field--valid');\r\n\r\n    this.isValid = false;\r\n  }\r\n\r\n  /**\r\n   * Cleans all the states, error and value of the field.\r\n   */\r\n  cleanup() {\r\n    log('Cleaning up', this.name);\r\n    this.component.host.classList.remove(\r\n      'form-field--invalid', 'form-field--valid', 'form-field--touched', 'form-field--dirty'\r\n    );\r\n    this.component.value = undefined;\r\n    this.component.error = undefined;\r\n    this.isValid = undefined;\r\n    this.isTouched = undefined;\r\n    this.isDirty = undefined;\r\n  }\r\n\r\n  /**\r\n   * Runs the all the validations of the field and sets the component's validity.\r\n   */\r\n  @Bind\r\n  async checkValidity(value?: any): Promise<CustomValidityState> {\r\n    const valueToAssert = value || this.component.value || '';\r\n    log('Validating', this.name, '=', valueToAssert);\r\n\r\n    let validityState: CustomValidityState = { valid: true };\r\n    const validators = toArray(this.component.validator);\r\n\r\n    const nativeFormField = this.component.getNativeFormField ? await this.component.getNativeFormField() : null;\r\n    if (nativeFormField) {\r\n      const nativeValidity = nativeFormField.validity;\r\n      validityState.badInput = nativeValidity.badInput;\r\n      validityState.customError = nativeValidity.customError;\r\n      validityState.patternMismatch = nativeValidity.patternMismatch;\r\n      validityState.rangeOverflow = nativeValidity.rangeOverflow;\r\n      validityState.rangeUnderflow = nativeValidity.rangeUnderflow;\r\n      validityState.stepMismatch = nativeValidity.stepMismatch;\r\n      validityState.tooLong = nativeValidity.tooLong;\r\n      validityState.tooShort = nativeValidity.tooShort;\r\n      validityState.typeMismatch = nativeValidity.typeMismatch;\r\n      validityState.valid = nativeValidity.valid;\r\n      validityState.valueMissing = nativeValidity.valueMissing;\r\n    }\r\n\r\n    // Running all validator functions\r\n    const formBehavior = this.formAttached ? this.formAttached.formBehavior : null;\r\n    for (const fn of validators) {\r\n      let state;\r\n      try {\r\n        const exec = fn(valueToAssert, this, formBehavior);\r\n        state = exec instanceof Promise ? await exec : exec;\r\n      } catch (err) {\r\n        log('Error in validator function', fn.name, err);\r\n      }\r\n\r\n      if (state) {\r\n        // Assign the custom validity tokens.\r\n        validityState = { ...validityState, ...state };\r\n\r\n        // If in the last verification it still valid\r\n        // so we gonna check the overall state again.\r\n        const { valid: stillValid, ...validityTokens } = validityState;\r\n        if (stillValid) {\r\n          validityState.valid = !Object.values(validityTokens)\r\n            .find(hasError => !!hasError);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validityState.valid) {\r\n      this.component.error = null;\r\n      this.setValid();\r\n    } else {\r\n      this.component.error = this.buildErrorMessageByValidityState(validityState) || true;\r\n      this.setInvalid();\r\n      this.component.host.dispatchEvent(\r\n        new CustomEvent('formFieldInvalid', { detail: validityState })\r\n      );\r\n    }\r\n\r\n    this.component.validity = validityState;\r\n\r\n    return validityState;\r\n  }\r\n\r\n  /**\r\n   * Add a validator to the validation pipeline.\r\n   * @param validator The validation function.\r\n   */\r\n  addValidator(validator: ValidatorFn) {\r\n    if (!this.component.validator) {\r\n      this.component.validator = [];\r\n    } else if (!(this.component.validator instanceof Array)) {\r\n      this.component.validator = [ this.component.validator ];\r\n    }\r\n    this.component.validator.push(validator);\r\n\r\n    return this;\r\n  }\r\n\r\n  getCustomErrorMessagesFromInlineAttrs() {\r\n    const attrs = this.component.host.attributes;\r\n\r\n    return Object.keys(attrs)\r\n      .map(key => attrs[key].name)\r\n      .filter(key => key.indexOf('-message') > -1)\r\n      .reduce((acc, key) => {\r\n        acc[dashToCamelCase(key)] = attrs[key].value;\r\n        return acc;\r\n      }, {});\r\n  }\r\n\r\n  getErrorMessages() {\r\n    return this.getCustomErrorMessagesFromInlineAttrs();\r\n  }\r\n\r\n  buildErrorMessageByValidityState(validityState: CustomValidityState) {\r\n    const messages = this.getErrorMessages();\r\n\r\n    for (const token in validityState) {\r\n      if (validityState[token] && token !== 'valid') {\r\n        if (typeof validityState[token] === 'string') {\r\n          return validityState[token];\r\n        } else {\r\n          return messages[token + 'Message'];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"version":3}