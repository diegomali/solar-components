{"file":"ac-modal-controller.entry.js","mappings":";;;;;MAiBa,iBAAiB;;;;;;IAI5B,uBAAkB,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAElD,WAAM,GAAG,UAAU,CAAC;;;;IAKpB,cAAS,GAAgE,EAAE,CAAC;;;;;;EAU5E,MAAM,MAAM,CAAC,KAAsD;IACjE,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAyB,CAAC;IAC7E,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IAExB,MAAM,KAAK,GACT,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAE9C,OAAO,CAAC,gBAAgB,CAAC,eAAe,EAAE;MACxC,KAAK,CAAC,MAAM,EAAE,CAAC;KAChB,CAAC,CAAC;IAEH,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE;MAC9B,OAAO,CAAC,MAAM,EAAE,CAAC;MACjB,aAAa,CAAC,MAAM,EAAE,CAAC;KACxB,CAAC,CAAC;IAEH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,aAAa,CAAC,OAAO,EAAE,CAAC;IACxB,OAAO,KAAK,CAAC;GACd;;;;EAMD,MAAM,OAAO,CAAC,IAAI;IAChB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;IACtC,OAAO,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;GAC/B;EAED,oBAAoB,MAAK;;;;;;","names":[],"sources":["./src/components/organisms/ac-modal/ac-modal-controller/ac-modal-controller.tsx"],"sourcesContent":["import { Component, Element, Method, Prop } from '@stencil/core';\r\n\r\nimport {\r\n  ControllerBehavior,\r\n  ControllerComponent,\r\n  ControllerComponentOptions, HTMLStencilControlledElement,\r\n} from '../../../../behaviors/controller-behavior/controller-behavior';\r\nimport { ScrollManager } from '../../../../utils/scroll-manager';\r\nimport { AcOverlay } from '../../../portals/ac-overlay/ac-overlay';\r\nimport { AcModal } from '../ac-modal';\r\n\r\n/**\r\n * A controller that creates modal on the screen.\r\n */\r\n@Component({\r\n  tag: 'ac-modal-controller',\r\n})\r\nexport class AcModalController implements ControllerComponent<AcModal, HTMLAcModalElement> {\r\n  /**\r\n   * The instance of the controller behavior that setup the modals on the screen.\r\n   */\r\n  controllerBehavior = new ControllerBehavior(this);\r\n\r\n  target = 'ac-modal';\r\n\r\n  /**\r\n   * The list of modals that are displayed.\r\n   */\r\n  modalList: HTMLStencilControlledElement<AcModal, HTMLAcModalElement>[] = [];\r\n\r\n  @Element() host: HTMLElement;\r\n\r\n  @Prop() bound: string;\r\n\r\n  /**\r\n   * Setup a new modal on the screen.\r\n   */\r\n  @Method()\r\n  async create(props: ControllerComponentOptions<AcModal & AcOverlay>) {\r\n    const wrapper = document.createElement('ac-overlay') as HTMLAcOverlayElement;\r\n    props.wrapper = wrapper;\r\n\r\n    const modal =\r\n      await this.controllerBehavior.create(props);\r\n\r\n    wrapper.addEventListener('backDropClick', () => {\r\n      modal.remove();\r\n    });\r\n\r\n    modal.addEventListener('close', () => {\r\n      wrapper.remove();\r\n      ScrollManager.enable();\r\n    });\r\n\r\n    this.modalList.push(modal);\r\n    ScrollManager.disable();\r\n    return modal;\r\n  }\r\n\r\n  /**\r\n   * Clear all modals that are displayed.\r\n   */\r\n  @Method()\r\n  async dismiss(data) {\r\n    const topModal = this.modalList.pop();\r\n    return topModal.dismiss(data);\r\n  }\r\n\r\n  disconnectedCallback() {}\r\n}\r\n"],"version":3}