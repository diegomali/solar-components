{"file":"focus-behavior-9b8b5162.js","mappings":";;;AAIA,MAAM,GAAG,GAAGA,OAAK,CAAC,qBAAqB,CAAC,CAAC;AAEzC;;;MAGa,aAAc,SAAQ,iBAAqC;EAAxE;;;;;;IAmBU,oBAAe,GAAG,CAAC,EAAO;MAChC,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;QAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;QAEnE,MAAM,0BAA0B,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,KAAK,QAAQ,CAAC;QAClG,IAAI,0BAA0B,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE;UACrF,GAAG,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;UACjC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;SACpC;OACF;KACF,CAAC;GAeH;;;;EAvCC,OAAO,eAAe,CAAC,QAAQ,EAAE,MAAM;IACrC,IAAI,YAAY,GAAG,KAAK,CAAC;IACzB,IAAI,QAAQ,CAAC,EAAE,EAAE;MACf,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI;SAC7B,aAAa,CAAC,iBAAiB,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;MACnD,YAAY,GAAG,UAAU,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;KACjE;IACD,OAAO,YAAY,CAAC;GACrB;;;;EAqBD,MAAM;IACJ,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;GAC/D;;;;EAKD,MAAM;IACJ,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;GAClE;;;;;","names":["debug"],"sources":["./src/behaviors/focus-behavior.ts"],"sourcesContent":["import debug from 'debug/src/browser';\r\n\r\nimport { ComponentBase, ComponentBehavior } from '../utils/stencil/component-behavior';\r\n\r\nconst log = debug('solar:FocusBehavior');\r\n\r\n/**\r\n * Implements a Focus logic in a component, providing a control for blur clicks.\r\n */\r\nexport class FocusBehavior extends ComponentBehavior<FocusableComponent> {\r\n\r\n  /**\r\n   * Check if a target node branch has a data-toggle that match the host id.\r\n   */\r\n  static checkBypassNode(focusElt, target) {\r\n    let isBypassNode = false;\r\n    if (focusElt.id) {\r\n      const bypassNode = document.body\r\n        .querySelector(`[data-toggle=\"${focusElt.id}\"]`);\r\n      isBypassNode = bypassNode ? bypassNode.contains(target) : false;\r\n    }\r\n    return isBypassNode;\r\n  }\r\n\r\n  /**\r\n   * Filter all the clicks in the body and calls the `whenBlur` from the component if match an outside click.\r\n   * @param ev A Click Event.\r\n   */\r\n  private handleBodyClick = (ev: any) => {\r\n    if (this.component.hasFocus) {\r\n      const focusElt = this.component.focusTarget || this.component.host;\r\n\r\n      const isClickingOutsideTheTarget = ev.target.closest(focusElt.tagName.toLowerCase()) !== focusElt;\r\n      if (isClickingOutsideTheTarget && !FocusBehavior.checkBypassNode(focusElt, ev.target)) {\r\n        log('Clicked outside', focusElt);\r\n        this.component.whenBlur(ev.target);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Setup the event listener to the body.\r\n   */\r\n  attach() {\r\n    document.body.addEventListener('click', this.handleBodyClick);\r\n  }\r\n\r\n  /**\r\n   * Remove the event listener to the body.\r\n   */\r\n  detach() {\r\n    document.body.removeEventListener('click', this.handleBodyClick);\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a component that implements the focus logic.\r\n */\r\nexport interface FocusableComponent extends ComponentBase {\r\n  /**\r\n   * The instance of the behavior applied in the component.\r\n   */\r\n  focusBehavior: FocusBehavior;\r\n\r\n  /**\r\n   * Called when the behavior detects a click outside of the component.\r\n   */\r\n  whenBlur: (element: HTMLElement) => void;\r\n\r\n  /**\r\n   * Used to control the focus state.\r\n   */\r\n  hasFocus: boolean;\r\n\r\n  /**\r\n   * The target to be checked. If it is null, the host field will be used.\r\n   */\r\n  focusTarget?: HTMLElement;\r\n}\r\n"],"version":3}