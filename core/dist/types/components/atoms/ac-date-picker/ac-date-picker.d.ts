import { EventEmitter } from '../../../stencil-public-runtime';
import { FormFieldComponent } from '../../../behaviors/form-behavior';
import { CustomValidityState, ValidatorFn } from '../../../utils/validations/validations';
export declare class AirDatePicker implements FormFieldComponent {
  private acInputBase;
  private _picker;
  host: HTMLAcDatePickerElement;
  /**
   * The FormFieldBehavior instance.
   */
  formFieldBehavior: any;
  label: string;
  classes: string;
  inline: boolean;
  language: string;
  startDate: Date;
  firstDay: string;
  weekends: number[];
  dateFormat: string;
  altField: string;
  altFieldDateFormat: string;
  toggleSelected: boolean;
  keyboardNav: boolean;
  position: string;
  offset: number;
  view: string;
  minView: string;
  showOtherMonths: boolean;
  selectOtherMonths: boolean;
  moveToOtherMonthsOnSelect: boolean;
  showOtherYears: boolean;
  selectOtherYears: boolean;
  moveToOtherYearsOnSelect: boolean;
  minDate: string;
  maxDate: string;
  disableNavWhenOutOfRange: boolean;
  multipleDates: boolean | number;
  multipleDatesSeparator: string;
  range: boolean;
  todayButton: boolean;
  clearButton: boolean;
  showEvent: string;
  autoClose: boolean;
  monthsField: string;
  timepicker: boolean;
  onlyTimepicker: boolean;
  dateTimeSeparator: string;
  timeFormat: string;
  minHours: number;
  maxHours: number;
  minMinutes: number;
  maxMinutes: number;
  hoursStep: number;
  minutesStep: number;
  name: string;
  disabled: boolean;
  required: boolean;
  validity: CustomValidityState;
  validator: ValidatorFn | ValidatorFn[];
  value: Date | Date[];
  isShowing: boolean;
  formattedValue: string;
  onSelect: EventEmitter;
  onShow: EventEmitter;
  onHide: EventEmitter;
  onChangeMonth: EventEmitter;
  onChangeYear: EventEmitter;
  onChangeDecade: EventEmitter;
  onChangeView: EventEmitter;
  onRenderCell: EventEmitter;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  show(): Promise<void>;
  hide(): Promise<void>;
  destroy(): Promise<void>;
  next(): Promise<void>;
  prev(): Promise<void>;
  selectDate(date: Date): Promise<void>;
  removeDate(date: Date): Promise<void>;
  clear(): Promise<void>;
  update(field: string, value: any): Promise<void>;
  setView(view: string): Promise<void>;
  setDate(date: Date): Promise<void>;
  getElement(): Promise<HTMLElement>;
  getSelectedDates(): Promise<Date[]>;
  getFormFieldBehavior(): Promise<any>;
  handleSelect(formattedDate: string, date: Date | Date[], inst: Object): void;
  handleShow(inst: Object, animationCompleted: boolean): void;
  handleHide(inst: Object, animationCompleted: boolean): void;
  toggleButton(): void;
  render(): any;
}
