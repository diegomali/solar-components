{"version":3,"names":["acAutocompleteCss","AcAutocomplete","this","asyncDataBehavior","AsyncDataBehavior","formFieldBehavior","FormFieldBehavior","requestCheckValidity","SelectPanel","createControllerPortal","ensureController","focusBehavior","FocusBehavior","errorDidUpdate","error","acInputBase","setInvalid","setValid","async","handleSelected","option","selectedText","title","value","setDirty","filter","isPanelOpen","event","target","executeFetch","getFetchParams","isShowingPanelDidUpdate","hasFocus","whenReceiveData","metaData","options","data","componentDidUpdate","checkValidity","selectChange","emit","whenBlur","element","selectPanel","contains","some","x","toString","toUpperCase","includes","setTouched","disconnectedCallback","render","h","Host","class","ref","name","disabled","type","label","onKeyUp","handleDebouncedKeyUp","size","loading","AcFaIcon","slot","icon","faSpinner","anim","popperPivot","host","reset","length","noResultsLabel","map","index","key","tabIndex","onClick","__decorate","Bind","Debounced"],"sources":["./src/components/molecules/ac-autocomplete/ac-autocomplete.scss?tag=ac-autocomplete","./src/components/molecules/ac-autocomplete/ac-autocomplete.tsx"],"sourcesContent":["@import \"../../../theme/variables\";\r\n\r\n.ac-autocomplete {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n\r\n  .ac-autocomplete__icon {\r\n    margin: $spacer-tiny;\r\n  }\r\n}","import { Component, Prop, h, Host, Element, State, Watch, Method, EventEmitter, Event } from '@stencil/core';\r\n\r\nimport { AsyncDataBehavior, AsyncDataComponent, AsyncMetadata } from '../../../behaviors/async-data-behavior';\r\nimport { AcOption } from '../../../utils/types/ac-option';\r\nimport { createControllerPortal } from '../../../behaviors/controller-behavior/create-controller-portal';\r\nimport { AcPanel } from '../../organisms/ac-panel/ac-panel';\r\nimport { AcPopper } from '../../portals/ac-popper/ac-popper';\r\nimport { ensureController } from '../../../utils/stencil/ensure-controller';\r\nimport { Bind } from '../../../utils/lang/bind';\r\nimport { Debounced } from '../../../utils/lang/reactivity';\r\nimport { FocusBehavior } from '../../../behaviors/focus-behavior';\r\nimport { FormFieldComponent, FormFieldBehavior } from '../../../behaviors/form-behavior';\r\nimport { ValidatorFn, CustomValidityState } from '../../../utils/validations/validations';\r\nimport { AcFaIcon } from '../../utils/ac-fa-icon';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  tag: 'ac-autocomplete',\r\n  styleUrl: 'ac-autocomplete.scss'\r\n})\r\nexport class AcAutocomplete implements AsyncDataComponent<AutocompleteFetchParams, AcOption[]>, FormFieldComponent {\r\n\r\n  /**\r\n   * A reference to the component element.\r\n   */\r\n  @Element() host: HTMLElement;\r\n  /**\r\n   * A reference to the ac-input-base component.\r\n   */\r\n  acInputBase: HTMLAcInputBaseElement;\r\n  /**\r\n   * The name of the internal input.\r\n   */\r\n  @Prop({ reflect: true }) name: string;\r\n  /**\r\n   * Set the disabled mode.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  /**\r\n   * The native required attribute.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean;\r\n  /**\r\n   * Set the custom empty result text.\r\n   */\r\n  @Prop({ reflect: true }) noResultsLabel = 'No results for';\r\n  /**\r\n   * Action to be call when the user start typing.\r\n   */\r\n  @Prop({ mutable: true }) fetch: (params: { filter: string }) => Promise<AsyncMetadata<AcOption[]>>;\r\n  /**\r\n   * Set the loading mode, showing a loading icon.\r\n   */\r\n  @Prop() loading: boolean;\r\n  /**\r\n   * The options that will be displayed in the panel.\r\n   */\r\n  @Prop({ mutable: true }) options: AcOption[] = [];\r\n    /**\r\n   * The validator functions.\r\n   */\r\n  @Prop({ mutable: true }) validator: ValidatorFn | ValidatorFn[];\r\n  /**\r\n   * Set the field in the error state with a message.\r\n   */\r\n  @Prop({ mutable: true }) error: string | boolean;\r\n  /**\r\n   * Select size\r\n   */\r\n  @Prop({ mutable: true }) size: 'small' | 'large';\r\n  /**\r\n   * The label text of the input.\r\n   */\r\n  @Prop() label: string;\r\n  /**\r\n   * The value of the input.\r\n   */\r\n  @Prop() value: any;\r\n  /**\r\n   * The text that will be displayed on the select input based on it value.\r\n   */\r\n  @State() selectedText: string;\r\n  /**\r\n   * The filter text used to search through the options.\r\n   */\r\n  @State() filter: string;\r\n\r\n  /**\r\n   * Flag that control the panel visibility.\r\n   */\r\n  @State() isPanelOpen = false;\r\n\r\n  asyncDataBehavior: AsyncDataBehavior<AutocompleteFetchParams, AcOption[]> = new AsyncDataBehavior<AutocompleteFetchParams, AcOption[]>(this);\r\n  /**\r\n   * The instance of the FormFieldBehavior.\r\n   */\r\n  formFieldBehavior: FormFieldBehavior = new FormFieldBehavior(this);\r\n\r\n  /**\r\n   * Flag to control input focus.\r\n   */\r\n  hasFocus: boolean;\r\n  /**\r\n   * Use to request a formFieldBehavior.checkValidity call.\r\n   */\r\n  requestCheckValidity: boolean = false;\r\n  /**\r\n   * The validity state.\r\n   */\r\n  @Prop({ mutable: true }) validity: CustomValidityState;\r\n    /**\r\n   * Fired when the user select an option.\r\n   */\r\n  @Event() selectChange: EventEmitter<any>;\r\n\r\n  private SelectPanel = createControllerPortal<AcPanel & AcPopper>(ensureController('ac-panel-controller'));\r\n  /**\r\n   * A reference to the ac-panel.\r\n   */\r\n  private selectPanel: HTMLAcPanelElement;\r\n\r\n  /**\r\n   * The instance of the FocusBehavior used to close the panel when the user clicks outside.\r\n   */\r\n  focusBehavior = new FocusBehavior(this);\r\n\r\n  @Watch('error')\r\n  errorDidUpdate(error) {\r\n    if (error) {\r\n      this.acInputBase.error = true;\r\n      this.formFieldBehavior.setInvalid();\r\n    } else {\r\n      this.acInputBase.error = false;\r\n      this.formFieldBehavior.setValid();\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async getFormFieldBehavior() {\r\n    return this.formFieldBehavior;\r\n  }\r\n\r\n  @Bind\r\n  handleSelected(option: AcOption) {\r\n    this.selectedText = option.title;\r\n    this.value = option.value;\r\n    this.requestCheckValidity = true;\r\n    this.formFieldBehavior.setDirty();\r\n    this.filter = null;\r\n    this.isPanelOpen = false;\r\n  }\r\n\r\n\r\n  @Bind\r\n  @Debounced(200)\r\n  private async handleDebouncedKeyUp(event) {\r\n    const { target: { value } } = event;\r\n    this.filter = value;\r\n    this.asyncDataBehavior.executeFetch();\r\n  }\r\n\r\n  getFetchParams() {\r\n    return { filter: this.filter };\r\n  }\r\n\r\n\r\n  @Watch('isPanelOpen')\r\n  isShowingPanelDidUpdate() {\r\n    this.hasFocus = this.isPanelOpen;\r\n  }\r\n\r\n  whenReceiveData(metaData: AsyncMetadata<AcOption[]>) {\r\n    this.options = metaData.data;\r\n    this.isPanelOpen = true;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.requestCheckValidity) {\r\n      this.formFieldBehavior.checkValidity(this.value);\r\n      this.requestCheckValidity = false;\r\n      this.selectChange.emit(this.value);\r\n    }\r\n  }\r\n  /**\r\n   * Toggle the panel view.\r\n   */\r\n  whenBlur(element) {\r\n    // If the target element is'nt a child of the panel.\r\n    if (!this.selectPanel.contains(element)) {\r\n      if (this.isPanelOpen) {\r\n        this.isPanelOpen = !this.isPanelOpen;\r\n      }\r\n      if (this.requestCheckValidity === false && this.isPanelOpen === false) {\r\n        if (!this.options.some(x => x.title.toString().toUpperCase().includes(this.acInputBase.value.toUpperCase()))) {\r\n          this.acInputBase.value = '';\r\n        }\r\n      }\r\n      this.formFieldBehavior.setTouched();\r\n    }\r\n  }\r\n  disconnectedCallback() {\r\n    this.isPanelOpen = false;\r\n  }\r\n\r\n  render() {\r\n    const SelectPanel = this.SelectPanel;\r\n    return <Host class=\"ac-autocomplete\">\r\n      <ac-input-base\r\n            ref={acInputBase => this.acInputBase = acInputBase}\r\n            class=\"ac-autocomplete__input\"\r\n            name={this.name}\r\n            disabled={this.disabled}\r\n            type=\"text\"\r\n            label={this.label}\r\n            value={this.selectedText}\r\n            onKeyUp={this.handleDebouncedKeyUp}\r\n            size={this.size}\r\n          >\r\n            {this.loading && <AcFaIcon slot=\"item-end\" class=\"ac-autocomplete__icon\" icon={faSpinner} size={14} anim=\"spin\"/>}\r\n      </ac-input-base>\r\n      <SelectPanel\r\n            ref={selectPanel => this.selectPanel = selectPanel}\r\n            class=\"ac-autocomplete__panel\"\r\n            popperPivot={this.host}\r\n            reset={!this.isPanelOpen}>\r\n          <ul class=\"ac-autocomplete__list ac-list\">\r\n            {this.options.length === 0\r\n              ?  <li class=\"ac-list__item\">\r\n                  {this.noResultsLabel} {this.filter}\r\n                </li>\r\n              : this.options.map((option, index) => (\r\n                <li\r\n                  class=\"ac-list__item\"\r\n                  key={index}\r\n                  tabIndex={index}\r\n                  value={option.value}\r\n                  onClick={() => this.handleSelected(option)}>\r\n                  {option.title}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </SelectPanel>\r\n    </Host>;\r\n  }\r\n}\r\n\r\ninterface AutocompleteFetchParams {\r\n  filter: string\r\n}\r\n"],"mappings":"+dAAA,MAAMA,EAAoB,iH,iXCoBbC,EAAc,M,oEAwEzBC,KAAAC,kBAA4E,IAAIC,EAAuDF,MAIvIA,KAAAG,kBAAuC,IAAIC,EAAkBJ,MAS7DA,KAAAK,qBAAgC,MAUxBL,KAAAM,YAAcC,EAA2CC,EAAiB,wBASlFR,KAAAS,cAAgB,IAAIC,EAAcV,M,wFA/EQ,iB,yDAYK,G,+KAiCxB,M,wBAqCvBW,eAAeC,GACb,GAAIA,EAAO,CACTZ,KAAKa,YAAYD,MAAQ,KACzBZ,KAAKG,kBAAkBW,Y,KAClB,CACLd,KAAKa,YAAYD,MAAQ,MACzBZ,KAAKG,kBAAkBY,U,EAK3BC,6BACE,OAAOhB,KAAKG,iB,CAIdc,eAAeC,GACblB,KAAKmB,aAAeD,EAAOE,MAC3BpB,KAAKqB,MAAQH,EAAOG,MACpBrB,KAAKK,qBAAuB,KAC5BL,KAAKG,kBAAkBmB,WACvBtB,KAAKuB,OAAS,KACdvB,KAAKwB,YAAc,K,CAMbR,2BAA2BS,GACjC,MAAQC,QAAQL,MAAEA,IAAYI,EAC9BzB,KAAKuB,OAASF,EACdrB,KAAKC,kBAAkB0B,c,CAGzBC,iBACE,MAAO,CAAEL,OAAQvB,KAAKuB,O,CAKxBM,0BACE7B,KAAK8B,SAAW9B,KAAKwB,W,CAGvBO,gBAAgBC,GACdhC,KAAKiC,QAAUD,EAASE,KACxBlC,KAAKwB,YAAc,I,CAGrBW,qBACE,GAAInC,KAAKK,qBAAsB,CAC7BL,KAAKG,kBAAkBiC,cAAcpC,KAAKqB,OAC1CrB,KAAKK,qBAAuB,MAC5BL,KAAKqC,aAAaC,KAAKtC,KAAKqB,M,EAMhCkB,SAASC,GAEP,IAAKxC,KAAKyC,YAAYC,SAASF,GAAU,CACvC,GAAIxC,KAAKwB,YAAa,CACpBxB,KAAKwB,aAAexB,KAAKwB,W,CAE3B,GAAIxB,KAAKK,uBAAyB,OAASL,KAAKwB,cAAgB,MAAO,CACrE,IAAKxB,KAAKiC,QAAQU,MAAKC,GAAKA,EAAExB,MAAMyB,WAAWC,cAAcC,SAAS/C,KAAKa,YAAYQ,MAAMyB,iBAAiB,CAC5G9C,KAAKa,YAAYQ,MAAQ,E,EAG7BrB,KAAKG,kBAAkB6C,Y,EAG3BC,uBACEjD,KAAKwB,YAAc,K,CAGrB0B,SACE,MAAM5C,EAAcN,KAAKM,YACzB,OAAO6C,EAACC,EAAI,CAACC,MAAM,mBACjBF,EAAA,iBACMG,IAAKzC,GAAeb,KAAKa,YAAcA,EACvCwC,MAAM,yBACNE,KAAMvD,KAAKuD,KACXC,SAAUxD,KAAKwD,SACfC,KAAK,OACLC,MAAO1D,KAAK0D,MACZrC,MAAOrB,KAAKmB,aACZwC,QAAS3D,KAAK4D,qBACdC,KAAM7D,KAAK6D,MAEV7D,KAAK8D,SAAWX,EAACY,EAAQ,CAACC,KAAK,WAAWX,MAAM,wBAAwBY,KAAMC,EAAWL,KAAM,GAAIM,KAAK,UAE/GhB,EAAC7C,EAAW,CACNgD,IAAKb,GAAezC,KAAKyC,YAAcA,EACvCY,MAAM,yBACNe,YAAapE,KAAKqE,KAClBC,OAAQtE,KAAKwB,aACf2B,EAAA,MAAIE,MAAM,iCACPrD,KAAKiC,QAAQsC,SAAW,EACpBpB,EAAA,MAAIE,MAAM,iBACRrD,KAAKwE,eAAc,IAAGxE,KAAKuB,QAE9BvB,KAAKiC,QAAQwC,KAAI,CAACvD,EAAQwD,IAC1BvB,EAAA,MACEE,MAAM,gBACNsB,IAAKD,EACLE,SAAUF,EACVrD,MAAOH,EAAOG,MACdwD,QAAS,IAAM7E,KAAKiB,eAAeC,IAClCA,EAAOE,W,4HA9FxB0D,EAAA,CADCC,G,mCAaaD,EAAA,CAFbC,EACAC,EAAU,M"}