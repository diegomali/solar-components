{"version":3,"names":["acSelectCss","AcSelect","this","SelectPanel","createControllerPortal","ensureController","focusBehavior","FocusBehavior","formFieldBehavior","FormFieldBehavior","asyncDataBehavior","AsyncDataBehavior","valueDidUpdate","newValue","oldValue","equals","formatSelectedText","optionsDidUpdate","newOptions","oldOptions","selectedOptions","filter","o","selected","length","value","map","multiple","isShowingPanelDidUpdate","options","selectedText","hasFocus","isShowingPanel","errorDidUpdate","error","acInputBase","setInvalid","setValid","filterDidUpdate","fetch","executeFetch","filteredOptions","title","toLowerCase","indexOf","async","nativeSelect","getOptionsByValue","values","requestCheckValidity","setDirty","Array","forEach","includes","option","optionArr","toArray","Object","assign","whenBlur","element","selectPanel","contains","togglePanel","setTouched","whenReceiveData","metaData","data","getFetchParams","componentDidLoad","loadOptionsFromHTML","disconnectedCallback","closePanel","componentDidUpdate","checkValidity","selectChange","emit","push","count","total","separator","item","join","label","childOptions","host","querySelectorAll","mappedOptions","prototype","call","tagName","text","hasAttribute","group","parentElement","renderNativeOptions","valueAsArray","opt","h","renderOptions","searchable","class","searchHelperLabel","onClick","handleSelect","noResultsLabel","loading","setFocus","openPanel","selectedIndex","findIndex","index","nativeInput","getNativeInput","isEmpty","render","icon","faChevronUp","faChevronDown","optionsToRender","Host","ref","name","disabled","type","required","onFocus","onChange","handleChangeInput","readonly","onKeyUp","handleDebouncedKeyUp","size","slot","theme","fill","AcFaIcon","helperText","popperPivot","reset","style","maxHeight","MAX_ITEMS_TO_RENDER","ITEM_HEIGHT","__decorate","Bind","Debounced"],"sources":["./src/components/molecules/ac-select/ac-select.scss?tag=ac-select","./src/components/molecules/ac-select/ac-select.tsx"],"sourcesContent":["@import \"../../../theme/variables\";\r\n\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// General Style\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n\r\nac-select {\r\n  display: flex;\r\n  position: relative;\r\n  flex-direction: column;\r\n\r\n  & > [slot=\"item-top\"], & > [slot=\"item-bottom\"] {\r\n    display: none !important;\r\n  }\r\n\r\n  .ac-select__helper-text {\r\n    display: block;\r\n    margin-top: $spacer-tiny;\r\n    color: var-color(\"neutral\", \"darker\");\r\n    font-size: $font-tiny;\r\n  }\r\n\r\n  .ac-select__native, .ac-select__phantom-dom {\r\n    display: none;\r\n  }\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// State Modifiers\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n\r\n// Error mode (FormFieldBehavior)\r\n// --------------------------------------------------\r\n\r\nac-select.form-field--invalid {\r\n  .ac-select__helper-text {\r\n    color: var-color(\"alert\", \"normal\");\r\n  }\r\n}\r\n\r\n// List's Scrollbar theming\r\n// ---------------------------------------------------------\r\n\r\n@include scrollbar(\"ul.ac-select__list\");\r\n","import { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { Component, Element, Event, EventEmitter, Host, Method, Prop, State, Watch, h } from '@stencil/core';\r\nimport { equals, isEmpty } from 'ramda';\r\n\r\nimport { AsyncDataBehavior, AsyncDataComponent } from '../../../behaviors/async-data-behavior';\r\nimport { createControllerPortal } from '../../../behaviors/controller-behavior/create-controller-portal';\r\nimport { FocusBehavior, FocusableComponent } from '../../../behaviors/focus-behavior';\r\nimport { FormFieldBehavior, FormFieldComponent } from '../../../behaviors/form-behavior';\r\nimport { Bind } from '../../../utils/lang/bind';\r\nimport { Debounced } from '../../../utils/lang/reactivity';\r\nimport { toArray } from '../../../utils/lang/to-array';\r\nimport { ensureController } from '../../../utils/stencil/ensure-controller';\r\nimport { AcOption } from '../../../utils/types/ac-option';\r\nimport { CustomValidityState, ValidatorFn } from '../../../utils/validations/validations';\r\nimport { AcPanel } from '../../organisms/ac-panel/ac-panel';\r\nimport { AcPopper } from '../../portals/ac-popper/ac-popper';\r\nimport { AcFaIcon } from '../../utils/ac-fa-icon';\r\n\r\n/**\r\n * Accera's full-featured select webcomponent.\r\n */\r\n@Component({\r\n  tag: 'ac-select',\r\n  styleUrl: 'ac-select.scss',\r\n})\r\nexport class AcSelect implements\r\n  FocusableComponent,\r\n  FormFieldComponent,\r\n  AsyncDataComponent<SelectFetchParams, AcOption[]> {\r\n  /**\r\n   * The count of max items to render in the select list, used to calculate the size of the panel.\r\n   */\r\n  static readonly MAX_ITEMS_TO_RENDER = 10;\r\n\r\n  /**\r\n   * The height of each item to render, used to calculate the size of the panel.\r\n   */\r\n  static readonly ITEM_HEIGHT = 30;\r\n\r\n  private SelectPanel =\r\n    createControllerPortal<AcPanel & AcPopper>(ensureController('ac-panel-controller'));\r\n\r\n  /**\r\n   * A reference to the ac-input-base component.\r\n   */\r\n  acInputBase: HTMLAcInputBaseElement;\r\n\r\n  /**\r\n   * The native select element.\r\n   */\r\n  nativeSelect: HTMLSelectElement;\r\n\r\n  /**\r\n   * A reference to the ac-panel.\r\n   */\r\n  selectPanel: HTMLAcPanelElement;\r\n\r\n  /**\r\n   * The instance of the FocusBehavior used to close the panel when the user clicks outside.\r\n   */\r\n  focusBehavior = new FocusBehavior(this);\r\n\r\n  /**\r\n   * The instance of the FormFieldBehavior.\r\n   */\r\n  formFieldBehavior = new FormFieldBehavior(this);\r\n\r\n  /**\r\n   * The instance of the AsyncDataBehavior used to control async data features.\r\n   */\r\n  asyncDataBehavior = new AsyncDataBehavior(this);\r\n\r\n  hasFocus: boolean;\r\n\r\n  /**\r\n   * Use to request a formFieldBehavior.checkValidity call.\r\n   */\r\n  requestCheckValidity: boolean;\r\n\r\n  @Element() host: HTMLAcSelectElement;\r\n\r\n  /**\r\n   * The label text of the this input group.\r\n   */\r\n  @Prop() label: string;\r\n\r\n  /**\r\n   * The helper text to guide the user.\r\n   */\r\n  @Prop() helperText: string;\r\n\r\n  /**\r\n   * Set the loading mode, showing a loading icon.\r\n   */\r\n  @Prop() loading: boolean;\r\n\r\n  /**\r\n   * Set the loading mode, showing a loading icon.\r\n   */\r\n  @Prop() fetch: (params: any) => Promise<{ links?: any, meta?: any, data: AcOption[] }>;\r\n\r\n  /**\r\n   * Set the field in the error state with a message.\r\n   */\r\n  @Prop({ mutable: true }) error: string | boolean;\r\n\r\n  /**\r\n   * The validator functions.\r\n   */\r\n  @Prop({ mutable: true }) validator: ValidatorFn | ValidatorFn[];\r\n\r\n  /**\r\n   * The validity state.\r\n   */\r\n  @Prop({ mutable: true }) validity: CustomValidityState;\r\n\r\n  /**\r\n   * The options that will be displayed in the panel.\r\n   */\r\n  @Prop({ mutable: true }) options: AcOption[];\r\n\r\n  /**\r\n   * The value of the internal input.\r\n   */\r\n  @Prop({ mutable: true }) value: (string | number)[] | string | number;\r\n\r\n  /**\r\n   * The name of the internal input.\r\n   */\r\n  @Prop({ reflect: true }) name: string;\r\n\r\n  /**\r\n   * If true, the component will handle multiple selected items.\r\n   */\r\n  @Prop({ reflect: true }) multiple: boolean;\r\n\r\n  /**\r\n   * Set the disabled mode.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n\r\n  /**\r\n   * Set the search mode.\r\n   */\r\n  @Prop({ reflect: true }) searchable: boolean;\r\n\r\n  /**\r\n   * Set the custom empty result text.\r\n   */\r\n  @Prop({ reflect: true }) noResultsLabel = 'No results for';\r\n\r\n  /**\r\n   * Set the custom search helper text.\r\n   */\r\n  @Prop({ reflect: true }) searchHelperLabel = 'Use the field to search';\r\n\r\n  /**\r\n   * The native required attribute.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean;\r\n\r\n  /**\r\n   * Select size\r\n   */\r\n  @Prop({ mutable: true }) size: 'small' | 'large';\r\n\r\n  /**\r\n   * Used to toggle the panel view.\r\n   */\r\n  @State() isShowingPanel: boolean;\r\n\r\n  /**\r\n   * The text that will be displayed on the select input based on it value.\r\n   */\r\n  @State() selectedText: string;\r\n\r\n  /**\r\n   * The filtered options based on the filter.\r\n   */\r\n  @State() filteredOptions: AcOption[];\r\n\r\n  /**\r\n   * The filter text used to search through the options.\r\n   */\r\n  @State() filter: string;\r\n\r\n  /**\r\n   * Fired when the user select/deselect an option.\r\n   */\r\n  @Event() selectChange: EventEmitter<any>;\r\n\r\n  @Watch('value')\r\n  valueDidUpdate(newValue: (number | string)[] | number | string,\r\n                 oldValue: (number | string)[] | number | string) {\r\n    if (!equals(newValue, []) && !equals(newValue, oldValue)) {\r\n      // Build the formatted text when the value change.\r\n      this.formatSelectedText();\r\n    }\r\n  }\r\n\r\n  @Watch('options')\r\n  optionsDidUpdate(newOptions, oldOptions) {\r\n    if (newOptions) {\r\n      const selectedOptions = newOptions.filter(o => o.selected); // Get all selected\r\n      if (selectedOptions.length > 0) {\r\n        const value = selectedOptions.map(o => o.value);\r\n        this.value = this.multiple ? value : value[0]; // Array to a single value for Single select\r\n      } else {\r\n        // @TODO: Use defaultValue/initialValue property.\r\n        this.value = !oldOptions ? this.value : null;\r\n      }\r\n    }\r\n\r\n    // Forcing update the value whatever it takes.\r\n    this.formatSelectedText();\r\n  }\r\n\r\n  @Watch('isShowingPanel')\r\n  isShowingPanelDidUpdate() {\r\n    if (this.options.length === 0) {\r\n      this.selectedText = null;\r\n    }\r\n    this.hasFocus = this.isShowingPanel;\r\n  }\r\n\r\n  @Watch('error')\r\n  errorDidUpdate(error) {\r\n    if (error) {\r\n      this.acInputBase.error = true;\r\n      this.formFieldBehavior.setInvalid();\r\n    } else {\r\n      this.acInputBase.error = false;\r\n      this.formFieldBehavior.setValid();\r\n    }\r\n  }\r\n\r\n  @Watch('filter')\r\n  filterDidUpdate() {\r\n    if (this.filter) {\r\n      if (this.fetch) {\r\n        this.asyncDataBehavior.executeFetch();\r\n      } else {\r\n        this.filteredOptions = this.options.filter(o =>\r\n          o.title\r\n            .toLowerCase()\r\n            .indexOf(this.filter.toLowerCase()) > -1\r\n        );\r\n      }\r\n    } else {\r\n      this.filteredOptions = null;\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async getNativeFormField() {\r\n    return this.nativeSelect;\r\n  }\r\n\r\n  @Method()\r\n  async getSelectedOptions() {\r\n    return this.getOptionsByValue(this.value);\r\n  }\r\n\r\n  @Method()\r\n  async setValue(values) {\r\n    this.value = values;\r\n    this.requestCheckValidity = true;\r\n    this.formFieldBehavior.setDirty();\r\n\r\n    if (values instanceof Array) {\r\n      this.options.forEach(o => {\r\n        o.selected = values.includes(o.value);\r\n      });\r\n    } else {\r\n      this.options.forEach(o => {\r\n        o.selected = values === o.value\r\n      });\r\n    }\r\n\r\n    this.options = [ ...this.options ];\r\n  }\r\n\r\n  @Method()\r\n  async setInitialOption(option: AcOption | AcOption[]) {\r\n    // Wrapping multi select.\r\n    const optionArr = toArray(option);\r\n    this.options = optionArr.map(o => ({ ...o, selected: true }));\r\n  }\r\n\r\n  @Method()\r\n  async getFormFieldBehavior() {\r\n    return this.formFieldBehavior;\r\n  }\r\n\r\n  /**\r\n   * Toggle the panel view.\r\n   */\r\n  whenBlur(element) {\r\n    // If the target element is'nt a child of the panel.\r\n    if (!this.selectPanel.contains(element)) {\r\n      if (this.isShowingPanel) {\r\n        this.togglePanel();\r\n      }\r\n      this.formFieldBehavior.setTouched();\r\n    }\r\n  }\r\n\r\n  whenReceiveData(metaData) {\r\n    this.filteredOptions = metaData.data;\r\n    this.options = metaData.data;\r\n  }\r\n\r\n  getFetchParams() {\r\n    return { filter: this.filter };\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (!this.options) {\r\n      this.loadOptionsFromHTML();\r\n    } else {\r\n      this.optionsDidUpdate(this.options, null);\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.closePanel();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Forcing clear the value\r\n    this.nativeSelect.value = this.value ? this.nativeSelect.value : '';\r\n\r\n    if (this.requestCheckValidity) {\r\n      this.formFieldBehavior.checkValidity(this.value);\r\n      this.requestCheckValidity = false;\r\n      this.selectChange.emit(this.value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Filter the options by the actual value. Used to update the options state by an external value update.\r\n   */\r\n  private getOptionsByValue(values: any[] | any): AcOption[] {\r\n    const options = [];\r\n    if (this.options && values) {\r\n      if (values instanceof Array) {\r\n        this.options.forEach(o => {\r\n          if (values.includes(o.value)) { options.push(o); }\r\n        });\r\n      } else {\r\n        this.options.forEach(o => {\r\n          if (values === o.value) { options.push(o); }\r\n        });\r\n      }\r\n    }\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Generate the selectedText based on the selected options.\r\n   */\r\n  private formatSelectedText() {\r\n    const selectedOptions = this.getOptionsByValue(this.value);\r\n    if (this.options) {\r\n      const count = selectedOptions.length;\r\n      const total = this.options.filter(o => !o.separator).length;\r\n\r\n      if (count > 0 && count < 3) {\r\n        this.selectedText = selectedOptions.map(item => item.title).join(', ');\r\n      } else if (count > 2 && count < total) {\r\n        this.selectedText = `${count} ${this.label}`;\r\n      } else if (count === total && count !== 0) {\r\n        this.selectedText = `Todos (${count})`;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load the options elements from the children HTML.\r\n   */\r\n  private loadOptionsFromHTML() {\r\n    const childOptions = this.host.querySelectorAll('option, optgroup');\r\n    const mappedOptions = Array.prototype.map.call(childOptions, o =>\r\n      ({\r\n        title: o.tagName === 'OPTGROUP' ? o.label : o.text,\r\n        value: o.value,\r\n        selected: o.hasAttribute('selected') && o.selected,\r\n        separator: o.tagName === 'OPTGROUP',\r\n        group: o.parentElement.tagName === 'OPTGROUP' ? o.parentElement.label : null\r\n      })\r\n    ) as AcOption[];\r\n    // Prevent initializing with empty array\r\n    // @LESSON: Do not use ternary operator because it will cause a component rerender.\r\n    if (mappedOptions.length > 0) {\r\n      this.options = mappedOptions\r\n    }\r\n  }\r\n\r\n  private renderNativeOptions() {\r\n    const valueAsArray: any[] = this.value ?\r\n      this.value instanceof Array ? this.value : [this.value]\r\n      : [];\r\n\r\n    return this.options.map(opt => {\r\n      if (!opt.separator) {\r\n        return (<option selected={valueAsArray.includes(opt.value)} value={opt.value}>{opt.title}</option>);\r\n      }\r\n    });\r\n  }\r\n\r\n  private renderOptions(options) {\r\n    if (!options) {\r\n      if (this.searchable) {\r\n        return (\r\n          <li class=\"ac-list__helper-item\">\r\n            {this.searchHelperLabel}\r\n          </li>\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (options.length > 0) {\r\n      return options.map(item => {\r\n        if (item.separator) {\r\n          return (\r\n            <li class=\"ac-list__separator\">\r\n              <span class=\"ac-list__separator-title\">{item.title}</span>\r\n              <span class=\"ac-list__separator-line\"></span>\r\n            </li>\r\n          );\r\n        } else {\r\n          return (\r\n            <li\r\n              class={'ac-list__item ' + (item.selected ? 'ac-list__item--selected' : '')}\r\n              onClick={() => this.handleSelect(item)}\r\n            >\r\n              {item.title}\r\n            </li>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      return (\r\n        <li class=\"ac-list__helper-item\">\r\n          {this.noResultsLabel} {this.filter}\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the panel.\r\n   */\r\n  @Bind\r\n  private togglePanel() {\r\n    if (!this.loading && !this.isShowingPanel) {\r\n      this.acInputBase.setFocus();\r\n    } else {\r\n      this.closePanel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open the panel.\r\n   */\r\n  @Bind\r\n  private openPanel() {\r\n    this.isShowingPanel = true;\r\n  }\r\n\r\n  /**\r\n   * Close the panel.\r\n   */\r\n  @Bind\r\n  private closePanel() {\r\n    this.isShowingPanel = false;\r\n  }\r\n\r\n  /**\r\n   * A listener that is dispatched when the user click on a select's option.\r\n   */\r\n  @Bind\r\n  private handleSelect(item) {\r\n    const selectedIndex = this.options.findIndex(o => o.value === item.value);\r\n    if (this.multiple) {\r\n      this.options[selectedIndex].selected = !item.selected; // Check the current selected\r\n    } else {\r\n      if (!item.selected) {\r\n        this.options.forEach((o, index) => {\r\n          o.selected = index === selectedIndex; // Check only the new selected item\r\n        });\r\n      }\r\n    }\r\n    this.options = [ ...this.options ]; // Dispatch options update\r\n\r\n    this.isShowingPanel = this.multiple; // Close only if it's a single select\r\n    this.requestCheckValidity = true;\r\n    this.formFieldBehavior.setDirty();\r\n    this.filter = null;\r\n  }\r\n\r\n  @Bind\r\n  @Debounced(200)\r\n  private async handleDebouncedKeyUp() {\r\n    const nativeInput = await this.acInputBase.getNativeInput();\r\n    this.filter = nativeInput.value;\r\n  }\r\n  @Bind\r\n  private async handleChangeInput() {\r\n    const nativeInput = await this.acInputBase.getNativeInput();\r\n    if (isEmpty(nativeInput.value)) {\r\n      this.options = [];\r\n    }\r\n  }\r\n  render() {\r\n    const icon = this.isShowingPanel ? faChevronUp : faChevronDown;\r\n    const SelectPanel = this.SelectPanel;\r\n    const optionsToRender = this.filteredOptions || this.options;\r\n\r\n    return <Host>\r\n      <div class=\"ac-select__phantom-dom\">\r\n        <slot/>\r\n      </div>\r\n      <select\r\n        ref={nativeSelect => this.nativeSelect = nativeSelect}\r\n        name={this.name}\r\n        multiple={this.multiple}\r\n        // required={this.required} TODO: Review chrome can´t focus element some times need refactor: Critical\r\n        disabled={this.disabled}\r\n        class=\"ac-select__native\"\r\n        data-native\r\n      >\r\n        {this.options && this.renderNativeOptions()}\r\n      </select>\r\n      <ac-input-base\r\n        ref={acInputBase => {\r\n          this.acInputBase = acInputBase as any;\r\n        }}\r\n        label={this.label}\r\n        type=\"text\"\r\n        required={this.required}\r\n        value={this.selectedText}\r\n        onFocus={this.openPanel}\r\n        onChange={this.handleChangeInput}\r\n        disabled={this.disabled}\r\n        readonly={!this.searchable}\r\n        onKeyUp={this.searchable ? this.handleDebouncedKeyUp : null}\r\n        size={this.size}\r\n      >\r\n        <slot name=\"item-start\" slot=\"item-start\" />\r\n        <slot name=\"input-label\" slot=\"input-label\" />\r\n        <ac-button\r\n          slot=\"item-end\"\r\n          theme={this.isShowingPanel ? 'primary' : 'light'}\r\n          fill=\"flat\"\r\n          disabled={this.disabled}\r\n          loading={this.loading}\r\n          onClick={this.togglePanel}\r\n          icon-only\r\n        >\r\n          <AcFaIcon icon={icon} size={12} />\r\n        </ac-button>\r\n      </ac-input-base>\r\n      {(this.error && typeof this.error === 'string') || (this.helperText && typeof this.helperText === 'string')\r\n        ? <span class=\"ac-select__helper-text\">\r\n            {this.error || this.helperText}\r\n          </span>\r\n        : null}\r\n        <SelectPanel\r\n          ref={selectPanel => this.selectPanel = selectPanel}\r\n          class=\"ac-select__panel\"\r\n          popperPivot={this.host}\r\n          reset={!this.isShowingPanel}\r\n        >\r\n          <slot name=\"item-top\" slot=\"item-top\" />\r\n          <ul class='ac-select__list ac-list'\r\n              style={{ maxHeight: AcSelect.MAX_ITEMS_TO_RENDER * AcSelect.ITEM_HEIGHT + 'px' }}>\r\n            {this.renderOptions(optionsToRender)}\r\n          </ul>\r\n          <slot name=\"item-bottom\" slot=\"item-bottom\" />\r\n        </SelectPanel>\r\n    </Host>\r\n  }\r\n}\r\n\r\nexport interface SelectFetchParams {\r\n  filter: string;\r\n}\r\n"],"mappings":"whBAAA,MAAMA,EAAc,g0B,iXCyBPC,EAAQ,M,oEAcXC,KAAAC,YACNC,EAA2CC,EAAiB,wBAoB9DH,KAAAI,cAAgB,IAAIC,EAAcL,MAKlCA,KAAAM,kBAAoB,IAAIC,EAAkBP,MAK1CA,KAAAQ,kBAAoB,IAAIC,EAAkBT,M,+TA+EA,iB,uBAKG,0B,2JAsC7CU,eAAeC,EACAC,GACb,IAAKC,EAAOF,EAAU,MAAQE,EAAOF,EAAUC,GAAW,CAExDZ,KAAKc,oB,EAKTC,iBAAiBC,EAAYC,GAC3B,GAAID,EAAY,CACd,MAAME,EAAkBF,EAAWG,QAAOC,GAAKA,EAAEC,WACjD,GAAIH,EAAgBI,OAAS,EAAG,CAC9B,MAAMC,EAAQL,EAAgBM,KAAIJ,GAAKA,EAAEG,QACzCvB,KAAKuB,MAAQvB,KAAKyB,SAAWF,EAAQA,EAAM,E,KACtC,CAELvB,KAAKuB,OAASN,EAAajB,KAAKuB,MAAQ,I,EAK5CvB,KAAKc,oB,CAIPY,0BACE,GAAI1B,KAAK2B,QAAQL,SAAW,EAAG,CAC7BtB,KAAK4B,aAAe,I,CAEtB5B,KAAK6B,SAAW7B,KAAK8B,c,CAIvBC,eAAeC,GACb,GAAIA,EAAO,CACThC,KAAKiC,YAAYD,MAAQ,KACzBhC,KAAKM,kBAAkB4B,Y,KAClB,CACLlC,KAAKiC,YAAYD,MAAQ,MACzBhC,KAAKM,kBAAkB6B,U,EAK3BC,kBACE,GAAIpC,KAAKmB,OAAQ,CACf,GAAInB,KAAKqC,MAAO,CACdrC,KAAKQ,kBAAkB8B,c,KAClB,CACLtC,KAAKuC,gBAAkBvC,KAAK2B,QAAQR,QAAOC,GACzCA,EAAEoB,MACCC,cACAC,QAAQ1C,KAAKmB,OAAOsB,gBAAkB,G,MAGxC,CACLzC,KAAKuC,gBAAkB,I,EAK3BI,2BACE,OAAO3C,KAAK4C,Y,CAIdD,2BACE,OAAO3C,KAAK6C,kBAAkB7C,KAAKuB,M,CAIrCoB,eAAeG,GACb9C,KAAKuB,MAAQuB,EACb9C,KAAK+C,qBAAuB,KAC5B/C,KAAKM,kBAAkB0C,WAEvB,GAAIF,aAAkBG,MAAO,CAC3BjD,KAAK2B,QAAQuB,SAAQ9B,IACnBA,EAAEC,SAAWyB,EAAOK,SAAS/B,EAAEG,MAAM,G,KAElC,CACLvB,KAAK2B,QAAQuB,SAAQ9B,IACnBA,EAAEC,SAAWyB,IAAW1B,EAAEG,KAAK,G,CAInCvB,KAAK2B,QAAU,IAAK3B,KAAK2B,Q,CAI3BgB,uBAAuBS,GAErB,MAAMC,EAAYC,EAAQF,GAC1BpD,KAAK2B,QAAU0B,EAAU7B,KAAIJ,GAACmC,OAAAC,OAAAD,OAAAC,OAAA,GAAUpC,GAAC,CAAEC,SAAU,Q,CAIvDsB,6BACE,OAAO3C,KAAKM,iB,CAMdmD,SAASC,GAEP,IAAK1D,KAAK2D,YAAYC,SAASF,GAAU,CACvC,GAAI1D,KAAK8B,eAAgB,CACvB9B,KAAK6D,a,CAEP7D,KAAKM,kBAAkBwD,Y,EAI3BC,gBAAgBC,GACdhE,KAAKuC,gBAAkByB,EAASC,KAChCjE,KAAK2B,QAAUqC,EAASC,I,CAG1BC,iBACE,MAAO,CAAE/C,OAAQnB,KAAKmB,O,CAGxBgD,mBACE,IAAKnE,KAAK2B,QAAS,CACjB3B,KAAKoE,qB,KACA,CACLpE,KAAKe,iBAAiBf,KAAK2B,QAAS,K,EAIxC0C,uBACErE,KAAKsE,Y,CAGPC,qBAEEvE,KAAK4C,aAAarB,MAAQvB,KAAKuB,MAAQvB,KAAK4C,aAAarB,MAAQ,GAEjE,GAAIvB,KAAK+C,qBAAsB,CAC7B/C,KAAKM,kBAAkBkE,cAAcxE,KAAKuB,OAC1CvB,KAAK+C,qBAAuB,MAC5B/C,KAAKyE,aAAaC,KAAK1E,KAAKuB,M,EAOxBsB,kBAAkBC,GACxB,MAAMnB,EAAU,GAChB,GAAI3B,KAAK2B,SAAWmB,EAAQ,CAC1B,GAAIA,aAAkBG,MAAO,CAC3BjD,KAAK2B,QAAQuB,SAAQ9B,IACnB,GAAI0B,EAAOK,SAAS/B,EAAEG,OAAQ,CAAEI,EAAQgD,KAAKvD,E,SAE1C,CACLpB,KAAK2B,QAAQuB,SAAQ9B,IACnB,GAAI0B,IAAW1B,EAAEG,MAAO,CAAEI,EAAQgD,KAAKvD,E,MAI7C,OAAOO,C,CAMDb,qBACN,MAAMI,EAAkBlB,KAAK6C,kBAAkB7C,KAAKuB,OACpD,GAAIvB,KAAK2B,QAAS,CAChB,MAAMiD,EAAQ1D,EAAgBI,OAC9B,MAAMuD,EAAQ7E,KAAK2B,QAAQR,QAAOC,IAAMA,EAAE0D,YAAWxD,OAErD,GAAIsD,EAAQ,GAAKA,EAAQ,EAAG,CAC1B5E,KAAK4B,aAAeV,EAAgBM,KAAIuD,GAAQA,EAAKvC,QAAOwC,KAAK,K,MAC5D,GAAIJ,EAAQ,GAAKA,EAAQC,EAAO,CACrC7E,KAAK4B,aAAe,GAAGgD,KAAS5E,KAAKiF,O,MAChC,GAAIL,IAAUC,GAASD,IAAU,EAAG,CACzC5E,KAAK4B,aAAe,UAAUgD,I,GAQ5BR,sBACN,MAAMc,EAAelF,KAAKmF,KAAKC,iBAAiB,oBAChD,MAAMC,EAAgBpC,MAAMqC,UAAU9D,IAAI+D,KAAKL,GAAc9D,IAAC,CAE1DoB,MAAOpB,EAAEoE,UAAY,WAAapE,EAAE6D,MAAQ7D,EAAEqE,KAC9ClE,MAAOH,EAAEG,MACTF,SAAUD,EAAEsE,aAAa,aAAetE,EAAEC,SAC1CyD,UAAW1D,EAAEoE,UAAY,WACzBG,MAAOvE,EAAEwE,cAAcJ,UAAY,WAAapE,EAAEwE,cAAcX,MAAQ,SAK5E,GAAII,EAAc/D,OAAS,EAAG,CAC5BtB,KAAK2B,QAAU0D,C,EAIXQ,sBACN,MAAMC,EAAsB9F,KAAKuB,MAC/BvB,KAAKuB,iBAAiB0B,MAAQjD,KAAKuB,MAAQ,CAACvB,KAAKuB,OAC/C,GAEJ,OAAOvB,KAAK2B,QAAQH,KAAIuE,IACtB,IAAKA,EAAIjB,UAAW,CAClB,OAAQkB,EAAA,UAAQ3E,SAAUyE,EAAa3C,SAAS4C,EAAIxE,OAAQA,MAAOwE,EAAIxE,OAAQwE,EAAIvD,M,KAKjFyD,cAActE,GACpB,IAAKA,EAAS,CACZ,GAAI3B,KAAKkG,WAAY,CACnB,OACEF,EAAA,MAAIG,MAAM,wBACPnG,KAAKoG,kB,CAIZ,OAAO,I,CAET,GAAIzE,EAAQL,OAAS,EAAG,CACtB,OAAOK,EAAQH,KAAIuD,IACjB,GAAIA,EAAKD,UAAW,CAClB,OACEkB,EAAA,MAAIG,MAAM,sBACRH,EAAA,QAAMG,MAAM,4BAA4BpB,EAAKvC,OAC7CwD,EAAA,QAAMG,MAAM,4B,KAGX,CACL,OACEH,EAAA,MACEG,MAAO,kBAAoBpB,EAAK1D,SAAW,0BAA4B,IACvEgF,QAAS,IAAMrG,KAAKsG,aAAavB,IAEhCA,EAAKvC,M,SAKT,CACL,OACEwD,EAAA,MAAIG,MAAM,wBACPnG,KAAKuG,eAAc,IAAGvG,KAAKmB,O,EAU5B0C,cACN,IAAK7D,KAAKwG,UAAYxG,KAAK8B,eAAgB,CACzC9B,KAAKiC,YAAYwE,U,KACZ,CACLzG,KAAKsE,Y,EAQDoC,YACN1G,KAAK8B,eAAiB,I,CAOhBwC,aACNtE,KAAK8B,eAAiB,K,CAOhBwE,aAAavB,GACnB,MAAM4B,EAAgB3G,KAAK2B,QAAQiF,WAAUxF,GAAKA,EAAEG,QAAUwD,EAAKxD,QACnE,GAAIvB,KAAKyB,SAAU,CACjBzB,KAAK2B,QAAQgF,GAAetF,UAAY0D,EAAK1D,Q,KACxC,CACL,IAAK0D,EAAK1D,SAAU,CAClBrB,KAAK2B,QAAQuB,SAAQ,CAAC9B,EAAGyF,KACvBzF,EAAEC,SAAWwF,IAAUF,CAAa,G,EAI1C3G,KAAK2B,QAAU,IAAK3B,KAAK2B,SAEzB3B,KAAK8B,eAAiB9B,KAAKyB,SAC3BzB,KAAK+C,qBAAuB,KAC5B/C,KAAKM,kBAAkB0C,WACvBhD,KAAKmB,OAAS,I,CAKFwB,6BACZ,MAAMmE,QAAoB9G,KAAKiC,YAAY8E,iBAC3C/G,KAAKmB,OAAS2F,EAAYvF,K,CAGdoB,0BACZ,MAAMmE,QAAoB9G,KAAKiC,YAAY8E,iBAC3C,GAAIC,EAAQF,EAAYvF,OAAQ,CAC9BvB,KAAK2B,QAAU,E,EAGnBsF,SACE,MAAMC,EAAOlH,KAAK8B,eAAiBqF,EAAcC,EACjD,MAAMnH,EAAcD,KAAKC,YACzB,MAAMoH,EAAkBrH,KAAKuC,iBAAmBvC,KAAK2B,QAErD,OAAOqE,EAACsB,EAAI,KACVtB,EAAA,OAAKG,MAAM,0BACTH,EAAA,cAEFA,EAAA,UACEuB,IAAK3E,GAAgB5C,KAAK4C,aAAeA,EACzC4E,KAAMxH,KAAKwH,KACX/F,SAAUzB,KAAKyB,SAEfgG,SAAUzH,KAAKyH,SACftB,MAAM,oBAAmB,oBAGxBnG,KAAK2B,SAAW3B,KAAK6F,uBAExBG,EAAA,iBACEuB,IAAKtF,IACHjC,KAAKiC,YAAcA,CAAkB,EAEvCgD,MAAOjF,KAAKiF,MACZyC,KAAK,OACLC,SAAU3H,KAAK2H,SACfpG,MAAOvB,KAAK4B,aACZgG,QAAS5H,KAAK0G,UACdmB,SAAU7H,KAAK8H,kBACfL,SAAUzH,KAAKyH,SACfM,UAAW/H,KAAKkG,WAChB8B,QAAShI,KAAKkG,WAAalG,KAAKiI,qBAAuB,KACvDC,KAAMlI,KAAKkI,MAEXlC,EAAA,QAAMwB,KAAK,aAAaW,KAAK,eAC7BnC,EAAA,QAAMwB,KAAK,cAAcW,KAAK,gBAC9BnC,EAAA,aACEmC,KAAK,WACLC,MAAOpI,KAAK8B,eAAiB,UAAY,QACzCuG,KAAK,OACLZ,SAAUzH,KAAKyH,SACfjB,QAASxG,KAAKwG,QACdH,QAASrG,KAAK6D,YAAW,kBAGzBmC,EAACsC,EAAQ,CAACpB,KAAMA,EAAMgB,KAAM,OAG9BlI,KAAKgC,cAAgBhC,KAAKgC,QAAU,UAAchC,KAAKuI,mBAAqBvI,KAAKuI,aAAe,SAC9FvC,EAAA,QAAMG,MAAM,0BACTnG,KAAKgC,OAAShC,KAAKuI,YAEtB,KACFvC,EAAC/F,EAAW,CACVsH,IAAK5D,GAAe3D,KAAK2D,YAAcA,EACvCwC,MAAM,mBACNqC,YAAaxI,KAAKmF,KAClBsD,OAAQzI,KAAK8B,gBAEbkE,EAAA,QAAMwB,KAAK,WAAWW,KAAK,aAC3BnC,EAAA,MAAIG,MAAM,0BACNuC,MAAO,CAAEC,UAAW5I,EAAS6I,oBAAsB7I,EAAS8I,YAAc,OAC3E7I,KAAKiG,cAAcoB,IAEtBrB,EAAA,QAAMwB,KAAK,cAAcW,KAAK,iB,gNAniBtBpI,EAAA6I,oBAAsB,GAKtB7I,EAAA8I,YAAc,GAiatBC,EAAA,CADPC,G,gCAaOD,EAAA,CADPC,G,8BASOD,EAAA,CADPC,G,+BASOD,EAAA,CADPC,G,iCAsBaD,EAAA,CAFbC,EACAC,EAAU,M,yCAMGF,EAAA,CADbC,G"}