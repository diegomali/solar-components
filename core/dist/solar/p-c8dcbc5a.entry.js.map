{"version":3,"names":["acPanelCss","AcPanel","constructor","hostRef","this","transitionBehavior","TransitionBehavior","componentWillLoad","disconnectedCallback","closeEv","emit","render","h","name"],"sources":["./src/components/organisms/ac-panel/ac-panel.scss?tag=ac-panel","./src/components/organisms/ac-panel/ac-panel.tsx"],"sourcesContent":["@import \"../../../theme/variables\";\r\n\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n// General Style\r\n// ---------------------------------------------------------------------------------------------------------------------\r\n\r\nac-panel {\r\n  display: block;\r\n  box-sizing: border-box;\r\n  flex-direction: column;\r\n  width: 100%;\r\n\r\n  transform-origin: 0 0;\r\n  transition: opacity $default-transition, transform $default-transition;\r\n  border: 1px solid var-color(\"neutral\", \"light\");\r\n  border-radius: $border-radius-default;\r\n  background: var-color(\"neutral\", \"contrast\");\r\n  box-shadow: $z3-shadow;\r\n\r\n  &.transition--before-enter {\r\n    transform: translateY(-10px) scaleY(0.5);\r\n    opacity: 0;\r\n  }\r\n\r\n  &.transition--before-leave {\r\n    transform: translateY(-10px) scaleY(0.5);\r\n    opacity: 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n// Browser is IE\r\n// ---------------------------------------------------------\r\n\r\n@include browser-ie {\r\n  ac-panel {\r\n    &.transition--before-enter {\r\n      transform: none;\r\n      opacity: 1;\r\n    }\r\n  }\r\n}\r\n\r\n","import { Component, Element, Event, EventEmitter, h } from '@stencil/core';\r\n\r\nimport { TransitionBehavior, TransitionComponent } from '../../../behaviors/transition-behavior';\r\n\r\n/**\r\n * Accera's Panel webcomponent used as a menu.\r\n */\r\n@Component({\r\n  tag: 'ac-panel',\r\n  styleUrl: 'ac-panel.scss',\r\n})\r\nexport class AcPanel implements TransitionComponent {\r\n  transitionBehavior = new TransitionBehavior(this);\r\n  @Element() host: HTMLAcPanelElement;\r\n\r\n  /**\r\n   * Dispatched when the modal closes.\r\n   */\r\n  @Event({ eventName: 'close' }) closeEv: EventEmitter<void>;\r\n\r\n  componentWillLoad() {}\r\n  disconnectedCallback() {\r\n    this.closeEv.emit();\r\n  }\r\n\r\n  render() {\r\n    return [\r\n      <slot name=\"item-top\" />,\r\n      <slot />,\r\n      <slot name=\"item-bottom\" />\r\n    ];\r\n  }\r\n}\r\n"],"mappings":"6IAAA,MAAMA,EAAa,onB,MCWNC,EAAO,MAJpBC,YAAAC,G,yCAKEC,KAAAC,mBAAqB,IAAIC,EAAmBF,K,CAQ5CG,oBAAiB,CACjBC,uBACEJ,KAAKK,QAAQC,M,CAGfC,SACE,MAAO,CACLC,EAAA,QAAMC,KAAK,aACXD,EAAA,aACAA,EAAA,QAAMC,KAAK,gB"}