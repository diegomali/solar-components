{"version":3,"names":["log","debug","FocusBehavior","ComponentBehavior","constructor","this","handleBodyClick","ev","component","hasFocus","focusElt","focusTarget","host","isClickingOutsideTheTarget","target","closest","tagName","toLowerCase","checkBypassNode","whenBlur","static","isBypassNode","id","bypassNode","document","body","querySelector","contains","attach","addEventListener","detach","removeEventListener"],"sources":["./src/behaviors/focus-behavior.ts"],"sourcesContent":["import debug from 'debug/src/browser';\r\n\r\nimport { ComponentBase, ComponentBehavior } from '../utils/stencil/component-behavior';\r\n\r\nconst log = debug('solar:FocusBehavior');\r\n\r\n/**\r\n * Implements a Focus logic in a component, providing a control for blur clicks.\r\n */\r\nexport class FocusBehavior extends ComponentBehavior<FocusableComponent> {\r\n\r\n  /**\r\n   * Check if a target node branch has a data-toggle that match the host id.\r\n   */\r\n  static checkBypassNode(focusElt, target) {\r\n    let isBypassNode = false;\r\n    if (focusElt.id) {\r\n      const bypassNode = document.body\r\n        .querySelector(`[data-toggle=\"${focusElt.id}\"]`);\r\n      isBypassNode = bypassNode ? bypassNode.contains(target) : false;\r\n    }\r\n    return isBypassNode;\r\n  }\r\n\r\n  /**\r\n   * Filter all the clicks in the body and calls the `whenBlur` from the component if match an outside click.\r\n   * @param ev A Click Event.\r\n   */\r\n  private handleBodyClick = (ev: any) => {\r\n    if (this.component.hasFocus) {\r\n      const focusElt = this.component.focusTarget || this.component.host;\r\n\r\n      const isClickingOutsideTheTarget = ev.target.closest(focusElt.tagName.toLowerCase()) !== focusElt;\r\n      if (isClickingOutsideTheTarget && !FocusBehavior.checkBypassNode(focusElt, ev.target)) {\r\n        log('Clicked outside', focusElt);\r\n        this.component.whenBlur(ev.target);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Setup the event listener to the body.\r\n   */\r\n  attach() {\r\n    document.body.addEventListener('click', this.handleBodyClick);\r\n  }\r\n\r\n  /**\r\n   * Remove the event listener to the body.\r\n   */\r\n  detach() {\r\n    document.body.removeEventListener('click', this.handleBodyClick);\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a component that implements the focus logic.\r\n */\r\nexport interface FocusableComponent extends ComponentBase {\r\n  /**\r\n   * The instance of the behavior applied in the component.\r\n   */\r\n  focusBehavior: FocusBehavior;\r\n\r\n  /**\r\n   * Called when the behavior detects a click outside of the component.\r\n   */\r\n  whenBlur: (element: HTMLElement) => void;\r\n\r\n  /**\r\n   * Used to control the focus state.\r\n   */\r\n  hasFocus: boolean;\r\n\r\n  /**\r\n   * The target to be checked. If it is null, the host field will be used.\r\n   */\r\n  focusTarget?: HTMLElement;\r\n}\r\n"],"mappings":"wEAIA,MAAMA,EAAMC,EAAM,uB,MAKLC,UAAsBC,EAAnCC,c,oBAmBUC,KAAAC,gBAAmBC,IACzB,GAAIF,KAAKG,UAAUC,SAAU,CAC3B,MAAMC,EAAWL,KAAKG,UAAUG,aAAeN,KAAKG,UAAUI,KAE9D,MAAMC,EAA6BN,EAAGO,OAAOC,QAAQL,EAASM,QAAQC,iBAAmBP,EACzF,GAAIG,IAA+BX,EAAcgB,gBAAgBR,EAAUH,EAAGO,QAAS,CACrFd,EAAI,kBAAmBU,GACvBL,KAAKG,UAAUW,SAASZ,EAAGO,O,IArBjCM,uBAAuBV,EAAUI,GAC/B,IAAIO,EAAe,MACnB,GAAIX,EAASY,GAAI,CACf,MAAMC,EAAaC,SAASC,KACzBC,cAAc,iBAAiBhB,EAASY,QAC3CD,EAAeE,EAAaA,EAAWI,SAASb,GAAU,K,CAE5D,OAAOO,C,CAsBTO,SACEJ,SAASC,KAAKI,iBAAiB,QAASxB,KAAKC,gB,CAM/CwB,SACEN,SAASC,KAAKM,oBAAoB,QAAS1B,KAAKC,gB"}