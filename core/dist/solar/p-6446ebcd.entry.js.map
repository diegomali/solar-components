{"version":3,"names":["AcModalController","this","controllerBehavior","ControllerBehavior","target","modalList","async","props","wrapper","document","createElement","modal","create","addEventListener","remove","ScrollManager","enable","push","disable","data","topModal","pop","dismiss","disconnectedCallback"],"sources":["./src/components/organisms/ac-modal/ac-modal-controller/ac-modal-controller.tsx"],"sourcesContent":["import { Component, Element, Method, Prop } from '@stencil/core';\r\n\r\nimport {\r\n  ControllerBehavior,\r\n  ControllerComponent,\r\n  ControllerComponentOptions, HTMLStencilControlledElement,\r\n} from '../../../../behaviors/controller-behavior/controller-behavior';\r\nimport { ScrollManager } from '../../../../utils/scroll-manager';\r\nimport { AcOverlay } from '../../../portals/ac-overlay/ac-overlay';\r\nimport { AcModal } from '../ac-modal';\r\n\r\n/**\r\n * A controller that creates modal on the screen.\r\n */\r\n@Component({\r\n  tag: 'ac-modal-controller',\r\n})\r\nexport class AcModalController implements ControllerComponent<AcModal, HTMLAcModalElement> {\r\n  /**\r\n   * The instance of the controller behavior that setup the modals on the screen.\r\n   */\r\n  controllerBehavior = new ControllerBehavior(this);\r\n\r\n  target = 'ac-modal';\r\n\r\n  /**\r\n   * The list of modals that are displayed.\r\n   */\r\n  modalList: HTMLStencilControlledElement<AcModal, HTMLAcModalElement>[] = [];\r\n\r\n  @Element() host: HTMLElement;\r\n\r\n  @Prop() bound: string;\r\n\r\n  /**\r\n   * Setup a new modal on the screen.\r\n   */\r\n  @Method()\r\n  async create(props: ControllerComponentOptions<AcModal & AcOverlay>) {\r\n    const wrapper = document.createElement('ac-overlay') as HTMLAcOverlayElement;\r\n    props.wrapper = wrapper;\r\n\r\n    const modal =\r\n      await this.controllerBehavior.create(props);\r\n\r\n    wrapper.addEventListener('backDropClick', () => {\r\n      modal.remove();\r\n    });\r\n\r\n    modal.addEventListener('close', () => {\r\n      wrapper.remove();\r\n      ScrollManager.enable();\r\n    });\r\n\r\n    this.modalList.push(modal);\r\n    ScrollManager.disable();\r\n    return modal;\r\n  }\r\n\r\n  /**\r\n   * Clear all modals that are displayed.\r\n   */\r\n  @Method()\r\n  async dismiss(data) {\r\n    const topModal = this.modalList.pop();\r\n    return topModal.dismiss(data);\r\n  }\r\n\r\n  disconnectedCallback() {}\r\n}\r\n"],"mappings":"iJAiBaA,EAAiB,M,yBAI5BC,KAAAC,mBAAqB,IAAIC,EAAmBF,MAE5CA,KAAAG,OAAS,WAKTH,KAAAI,UAAyE,G,qBAUzEC,aAAaC,GACX,MAAMC,EAAUC,SAASC,cAAc,cACvCH,EAAMC,QAAUA,EAEhB,MAAMG,QACEV,KAAKC,mBAAmBU,OAAOL,GAEvCC,EAAQK,iBAAiB,iBAAiB,KACxCF,EAAMG,QAAQ,IAGhBH,EAAME,iBAAiB,SAAS,KAC9BL,EAAQM,SACRC,EAAcC,QAAQ,IAGxBf,KAAKI,UAAUY,KAAKN,GACpBI,EAAcG,UACd,OAAOP,C,CAOTL,cAAca,GACZ,MAAMC,EAAWnB,KAAKI,UAAUgB,MAChC,OAAOD,EAASE,QAAQH,E,CAG1BI,uBAAoB,C"}