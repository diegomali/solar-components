{"version":3,"file":"ac-stepper.js","sourceRoot":"","sources":["../../../../src/components/atoms/ac-stepper/ac-stepper.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mCAAmC,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAsB,KAAK,EAAgB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAEpG,OAAO,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD;;GAEG;AAKH,MAAM,OAAO,SAAS;;;;;EAkBpB;;KAEG;EAEH,KAAK,CAAC,IAAI;IACR,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE;MAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;MACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;KAC/C;EACH,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,QAAQ;IACZ,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE;MACjB,IAAI,CAAC,IAAI,EAAE,CAAC;MACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;KAC/C;EACH,CAAC;EAED,MAAM;IACJ,OAAO;MACL,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAC3B,UAAI,KAAK,EAAE,mBAAmB,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,EAAE,CAAC,IAChF,CAAC,GAAG,CAAC,CACH,CACN;MACD,UAAI,KAAK,EAAE,mBAAmB,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,EAAE,CAAC;QAC3F,EAAC,QAAQ,IAAC,IAAI,EAAE,OAAO,GAAI,CACxB;KACN,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { Component, ComponentInterface, Event, EventEmitter, Method, Prop, h } from '@stencil/core';\r\n\r\nimport { count } from '../../../utils/lang/count';\r\nimport { AcFaIcon } from '../../utils/ac-fa-icon';\r\n\r\n/**\r\n * Accera's full-featured stepper web-component.\r\n */\r\n@Component({\r\n  tag: 'ac-stepper',\r\n  styleUrl: 'ac-stepper.scss'\r\n})\r\nexport class AcStepper implements ComponentInterface {\r\n\r\n  /**\r\n   * The count of steps to be displayed.\r\n   * TODO: It mighty support an array of steps in the future.\r\n   */\r\n  @Prop({ reflect: true }) steps: number;\r\n\r\n  /**\r\n   * The number of concluded steps.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) done: number;\r\n\r\n  /**\r\n   * Dispatched when the steps state changes.\r\n   */\r\n  @Event() stepperChange: EventEmitter<{ index: number }>;\r\n\r\n  /**\r\n   * Increments the count of concluded steps.\r\n   */\r\n  @Method()\r\n  async next() {\r\n    if (this.done < this.steps) {\r\n      this.done++;\r\n      this.stepperChange.emit({ index: this.done });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrement the count of concluded steps.\r\n   */\r\n  @Method()\r\n  async previous() {\r\n    if (this.done > 0) {\r\n      this.done--;\r\n      this.stepperChange.emit({ index: this.done });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return [\r\n      ...count(this.steps).map(i =>\r\n        <li class={'ac-stepper__step ' + (this.done >= i ? 'ac-stepper__step--active' : '')}>\r\n          {i + 1}\r\n        </li>\r\n      ),\r\n      <li class={'ac-stepper__step ' + (this.done === this.steps ? 'ac-stepper__step--active' : '')}>\r\n        <AcFaIcon icon={faCheck} />\r\n      </li>\r\n    ];\r\n  }\r\n}\r\n"]}