{"version":3,"file":"ac-table.js","sourceRoot":"","sources":["../../../../src/components/atoms/ac-table/ac-table.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Event, EventEmitter, Prop, Watch, h, Method } from '@stencil/core';\r\n\r\nimport { sortArray } from '../../../utils/collections/sort-array';\r\nimport { Bind } from '../../../utils/lang/bind';\r\n\r\nimport { TableBody } from './children/table-body';\r\nimport { TableHeader } from './children/table-header';\r\n\r\n@Component({\r\n  tag: 'ac-table',\r\n  styleUrl: 'ac-table.scss'\r\n})\r\nexport class AcTable {\r\n  /*\r\n  * Event to be issued when there is a change in orders.\r\n  */\r\n  @Event({ eventName: 'changeOrder' }) change: EventEmitter;\r\n\r\n  /*\r\n  * Emit event when table update\r\n  */\r\n  @Event({ eventName: 'tableChange' }) tableChange: EventEmitter;\r\n  /*\r\n  *  Header and Rows, can be modified directly or using the fetch method.\r\n  */\r\n  @Prop({ mutable: true }) options: Options;\r\n  /*\r\n  *  The fetch method is a callback that should return options.\r\n  */\r\n  @Prop({ mutable: true }) fetch: any;\r\n  /*\r\n  * The selectRow is callback with row, use for actions with row.\r\n  */\r\n  @Prop({ mutable: true }) selectRow: any;\r\n  /*\r\n  * Table has skeleton, but use loading after you have already set the Header.\r\n  */\r\n  @Prop({ mutable: true }) loading: boolean;\r\n  /*\r\n  * label for results not found.\r\n  */\r\n  @Prop({ mutable: true }) noResultsLabel: string;\r\n  /*\r\n  * When the parameters are changed and there is a fetch method, a new request is triggered.\r\n  */\r\n  @Prop({ mutable: true }) params = {\r\n    ordering: 'asc',\r\n    property: '',\r\n    selected: 1,\r\n    filters: {\r\n      limitRows: '',\r\n      totalRows: '',\r\n      search: ''\r\n    }\r\n  };\r\n\r\n  @Watch('params')\r\n  onParamsDidUpdate() {\r\n    if (this.fetch) {\r\n      this.update();\r\n    } else if (!this.fetch && this.options) {\r\n      this.options = {\r\n        ...this.options,\r\n        rows: sortArray(this.options.rows, this.params.ordering, this.params.property)\r\n      }\r\n    }\r\n  }\r\n\r\n  @Bind\r\n  changeOrder(ev) {\r\n    this.params = {\r\n      ...this.params,\r\n      property: ev.target.id,\r\n      ordering: this.params.ordering === 'asc' ? 'desc' : 'asc',\r\n    };\r\n    this.change.emit();\r\n  }\r\n\r\n  @Bind\r\n  @Method()\r\n  async update() {\r\n    this.fetch(this.params)\r\n      .then(rows => {\r\n        this.options = ({\r\n          ...this.options,\r\n          rows: rows.rows\r\n        });\r\n        this.tableChange.emit();\r\n      })\r\n      .catch(() => {\r\n        this.options = ({\r\n          ...this.options,\r\n          rows: null\r\n        })\r\n      });\r\n  }\r\n\r\n  @Watch('fetch')\r\n  onAddFetch() {\r\n    this.update();\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.fetch) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return [\r\n      this.options &&\r\n      <table class=\"table\">\r\n        <TableHeader columns={this.options ? this.options.header : null} click={this.changeOrder} order={this.params}/>\r\n        <TableBody\r\n          rows={this.options.rows}\r\n          columns={this.options.header}\r\n          onSelect={this.selectRow}\r\n          noResultsLabel={this.noResultsLabel}\r\n          loading={this.loading}\r\n        />\r\n      </table>\r\n    ];\r\n  }\r\n}\r\n\r\nexport interface Options {\r\n  header: [object],\r\n  rows: [object]\r\n}\r\n"]}