{"version":3,"file":"ac-toast.js","sourceRoot":"","sources":["../../../../src/components/atoms/ac-toast/ac-toast.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mCAAmC,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAE/F,OAAO,EAAE,kBAAkB,EAAuB,MAAM,wCAAwC,CAAC;AACjG,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAC;AAM9D,MAAM,OAAO,OAAO;;IAClB,uBAAkB,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;;;;;EAYlD,iBAAiB;EACjB,CAAC;EAED,oBAAoB;IAClB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;EACtB,CAAC;EAIK,AAAN,KAAK,CAAC,KAAK;IACT,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;EACrB,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAE;QACL,CAAC,aAAa,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,KAAK,SAAS;OACpD;MAEH,cAAQ,KAAK,EAAC,kBAAkB;QAC9B,UAAI,KAAK,EAAC,uBAAuB,IAAE,IAAI,CAAC,KAAK,CAAM;QACnD,EAAC,QAAQ,IACP,KAAK,EAAC,uBAAuB,EAC7B,IAAI,EAAE,OAAO,EACb,OAAO,EAAE,IAAI,CAAC,KAAK,GACnB;QACF,EAAC,cAAc,IAAC,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAC,qBAAqB,GAAG,CAC5D;MACT,eAAS,KAAK,EAAC,mBAAmB;QAChC,YAAM,KAAK,EAAC,wBAAwB,IAAE,IAAI,CAAC,OAAO,CAAQ,CAClD,CACH,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AA1BO;EAFL,IAAI;oCAIJ","sourcesContent":["import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { Component, Element, Event, EventEmitter, Host, Method, Prop, h } from '@stencil/core';\r\n\r\nimport { TransitionBehavior, TransitionComponent } from '../../../behaviors/transition-behavior';\r\nimport { Bind } from '../../../utils/lang/bind';\r\nimport { AcFaIcon } from '../../utils/ac-fa-icon';\r\nimport { AcNeogridShape } from '../../utils/ac-neogrid-shape';\r\n\r\n@Component({\r\n  tag: 'ac-toast',\r\n  styleUrl: 'ac-toast.scss'\r\n})\r\nexport class AcToast implements TransitionComponent {\r\n  transitionBehavior = new TransitionBehavior(this);\r\n\r\n  @Prop() type: 'alert' | 'success' | 'info' | 'warning';\r\n\r\n  @Prop() title: string;\r\n\r\n  @Prop() message: string;\r\n\r\n  @Element() host: HTMLAcToastElement;\r\n\r\n  @Event({ eventName: 'close' }) closeEv: EventEmitter<void>;\r\n\r\n  componentWillLoad() {\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.closeEv.emit();\r\n  }\r\n\r\n  @Bind\r\n  @Method()\r\n  async close() {\r\n    this.host.remove();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        class={{\r\n          [`ac-toast--${this.type}`]: this.type !== undefined,\r\n        }}\r\n      >\r\n      <header class=\"ac-toast__header\">\r\n        <h3 class=\"ac-toast_header-title\">{this.title}</h3>\r\n        <AcFaIcon\r\n          class=\"ac-toast__header-icon\"\r\n          icon={faTimes}\r\n          onClick={this.close}\r\n        />\r\n        <AcNeogridShape onClick={this.close} class=\"ac-toast__header-bg\" />\r\n      </header>\r\n      <section class=\"ac-toast__content\">\r\n        <span class=\"ac-toast__content-text\">{this.message}</span>\r\n      </section>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}