{"version":3,"file":"ac-toggle.js","sourceRoot":"","sources":["../../../../src/components/atoms/ac-toggle/ac-toggle.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAE,iBAAiB,EAAsB,MAAM,kCAAkC,CAAC;AACzF,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAQhD,MAAM,OAAO,QAAQ;;IAGnB,sBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;;;;qBAYV,OAAO;;mBAQK,KAAK;;;;;;EAe/C,YAAY;IAClB,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;EAC/B,CAAC;EAED,gBAAgB;EAChB,CAAC;EAED,oBAAoB;EACpB,CAAC;EAED,iBAAiB;EACjB,CAAC;EAGD,KAAK,CAAC,oBAAoB;IACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC;EAChC,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAE;QACL,CAAC,oBAAoB,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,KAAK,SAAS;QACpE,qBAAqB,EAAE,IAAI,CAAC,QAAQ;OACrC;MAED,aACE,KAAK,EAAC,sBAAsB;QAE5B,aACE,GAAG,EAAE,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,EAClD,KAAK,EAAC,mBAAmB,EACzB,IAAI,EAAC,UAAU,EACf,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,OAAO,EAAE,IAAI,CAAC,OAAO,GACrB;QACF,WAAK,KAAK,EAAC,mBAAmB,GAAG;QAChC,IAAI,CAAC,KAAK,IAAI,WAAK,KAAK,EAAC,kBAAkB,IAAE,IAAI,CAAC,KAAK,CAAO,CACzD,CACH,CACR,CAAA;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AA7CS;EADP,IAAI;4CAGJ","sourcesContent":["import { Component, Element, Host, Method, Prop, h } from '@stencil/core';\r\n\r\nimport { FormFieldBehavior, FormFieldComponent } from '../../../behaviors/form-behavior';\r\nimport { Bind } from '../../../utils/lang/bind';\r\nimport { CustomValidityState, ValidatorFn } from '../../../utils/validations/validations';\r\n\r\n@Component({\r\n  tag: 'ac-toggle',\r\n  styleUrl: 'ac-toggle.scss'\r\n})\r\n\r\nexport class AcToggle implements FormFieldComponent {\r\n  nativeInput: HTMLInputElement;\r\n\r\n  formFieldBehavior = new FormFieldBehavior(this);\r\n\r\n  @Element() host: HTMLAcToggleElement;\r\n\r\n  @Prop() label: string;\r\n\r\n  @Prop() name: string;\r\n\r\n  @Prop({ mutable: true }) error: string;\r\n  /**\r\n   * Set the label direction.\r\n   */\r\n  @Prop() direction: 'left' | 'right' = 'right';\r\n  /**\r\n   * The validity state.\r\n   */\r\n  @Prop({ mutable: true }) validity: CustomValidityState;\r\n  /**\r\n   * The actual checked state.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) checked = false;\r\n  /**\r\n   * Validation pipeline for this field.\r\n   */\r\n  @Prop({ mutable: true }) validator: ValidatorFn | ValidatorFn[];\r\n\r\n  @Prop() value: string;\r\n\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  /**\r\n   * Mark this field as required.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean;\r\n\r\n  @Bind\r\n  private handleChange() {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  componentDidLoad() {\r\n  }\r\n\r\n  disconnectedCallback() {\r\n  }\r\n\r\n  componentWillLoad() {\r\n  }\r\n\r\n  @Method()\r\n  async getFormFieldBehavior() {\r\n    return this.formFieldBehavior;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        class={{\r\n          [`ac-toggle--label-${this.direction}`]: this.direction !== undefined,\r\n          'ac-toggle--disabled': this.disabled\r\n        }}\r\n      >\r\n        <label\r\n          class=\"ac-toggle__container\"\r\n        >\r\n          <input\r\n            ref={nativeInput => this.nativeInput = nativeInput}\r\n            class=\"ac-toggle__native\"\r\n            type=\"checkbox\"\r\n            name={this.name}\r\n            value={this.value}\r\n            disabled={this.disabled}\r\n            onChange={this.handleChange}\r\n            checked={this.checked}\r\n          />\r\n          <div class=\"ac-toggle__custom\" />\r\n          {this.label && <div class=\"ac-toggle__label\">{this.label}</div>}\r\n        </label>\r\n      </Host>\r\n    )\r\n  }\r\n}\r\n"]}