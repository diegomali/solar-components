{"version":3,"file":"ac-overlay.js","sourceRoot":"","sources":["../../../../src/components/portals/ac-overlay/ac-overlay.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAE/F,OAAO,EAAE,cAAc,EAAmB,MAAM,oCAAoC,CAAC;AACrF,OAAO,EAAE,kBAAkB,EAAuB,MAAM,wCAAwC,CAAC;AACjG,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAEhD;;GAEG;AAKH,MAAM,OAAO,SAAS;;IACpB,mBAAc,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;IAC1C,uBAAkB,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;;oBASb,MAAM;;oBAUoB,eAAe;;;EAM9E,iBAAiB;EACjB,CAAC;EAED,oBAAoB;EACpB,CAAC;EAIK,AAAN,KAAK,CAAC,mBAAmB;IACvB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;EAC5B,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAE;QACL,CAAC,wBAAwB,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ;QAC1D,sBAAsB,EAAE,IAAI,CAAC,OAAO;OACrC,EACD,KAAK,EAAE;QACL,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3C,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;OACxC;MAEA,CAAC,IAAI,CAAC,OAAO,IAAI,WAAK,KAAK,EAAC,mBAAmB,EAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,GAAG;MACrF,eAAO,CACF,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AArBO;EAFL,IAAI;oDAIJ","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, Method, Prop, h } from '@stencil/core';\r\n\r\nimport { PortalBehavior, PortalComponent } from '../../../behaviors/portal-behavior';\r\nimport { TransitionBehavior, TransitionComponent } from '../../../behaviors/transition-behavior';\r\nimport { Bind } from '../../../utils/lang/bind';\r\n\r\n/**\r\n * Accera's Panel webcomponent used as a menu.\r\n */\r\n@Component({\r\n  tag: 'ac-overlay',\r\n  styleUrl: 'ac-overlay.scss',\r\n})\r\nexport class AcOverlay implements PortalComponent, TransitionComponent {\r\n  portalBehavior = new PortalBehavior(this);\r\n  transitionBehavior = new TransitionBehavior(this);\r\n\r\n  @Element() host: HTMLAcOverlayElement;\r\n\r\n  @Prop({ mutable: true }) vchildren;\r\n\r\n  /**\r\n   * The backdrop theme.\r\n   */\r\n  @Prop() backdrop: 'dark' | 'light' = 'dark';\r\n\r\n  @Prop() noLayer: boolean;\r\n\r\n  /**\r\n   * Content position based on flex layout.\r\n   */\r\n  @Prop() position:\r\n    'start start' | 'start center' | 'start flex-end' |\r\n    'center start' | 'center center' | 'center flex-end' |\r\n    'flex-end start' | 'flex-end center' | 'flex-end flex-end' = 'center center';\r\n\r\n  @Prop() disableClose: boolean;\r\n\r\n  @Event({ eventName: 'backDropClick' }) backDropClick: EventEmitter<void>;\r\n\r\n  componentWillLoad() {\r\n  }\r\n\r\n  disconnectedCallback() {\r\n  }\r\n\r\n  @Bind\r\n  @Method()\r\n  async handleBackDropClick() {\r\n    this.backDropClick.emit();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        class={{\r\n          [`ac-overlay--backdrop-${this.backdrop}`]: !!this.backdrop,\r\n          'ac-overlay--no-layer': this.noLayer,\r\n        }}\r\n        style={{\r\n          justifyContent: this.position.split(' ')[0],\r\n          alignItems: this.position.split(' ')[1],\r\n        }}\r\n      >\r\n        {!this.noLayer && <div class=\"ac-overlay--layer\" onClick={this.handleBackDropClick}/>}\r\n        <slot/>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}