{"version":3,"file":"ac-drop-down-menu.js","sourceRoot":"","sources":["../../../../src/components/molecules/ac-drop-down-menu/ac-drop-down-menu.tsx"],"names":[],"mappings":"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","sourcesContent":["import { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { Component, Element, Event, EventEmitter, Host, Prop, State, Watch, h } from '@stencil/core';\r\nimport { isNil } from 'ramda';\r\n\r\nimport { createControllerPortal } from '../../../behaviors/controller-behavior/create-controller-portal';\r\nimport { FocusBehavior } from '../../../behaviors/focus-behavior';\r\nimport { Bind } from '../../../utils/lang/bind';\r\nimport { ensureController } from '../../../utils/stencil/ensure-controller';\r\nimport { AcPanel } from '../../organisms/ac-panel/ac-panel';\r\nimport { AcPopper } from '../../portals/ac-popper/ac-popper';\r\nimport { AcFaIcon } from '../../utils/ac-fa-icon';\r\n\r\nimport { AcDropOption } from './ac-drop-option';\r\n\r\n@Component({\r\n  tag: 'ac-drop-down-menu',\r\n  styleUrl: './ac-drop-down-menu.scss'\r\n})\r\nexport class AcDropDownMenu {\r\n  /**\r\n   * A reference to the ac-panel.\r\n   */\r\n  private selectPanel: HTMLAcPanelElement;\r\n  /**\r\n   * Internal reference to the select panel.\r\n   */\r\n  private SelectPanel = createControllerPortal<AcPanel & AcPopper>(ensureController('ac-panel-controller'));\r\n  /**\r\n   * Reference to the component element.\r\n   */\r\n  @Element() host: HTMLAcDropDownMenuElement;\r\n  /**\r\n   * List of all options.\r\n   */\r\n  @Prop() options: AcDropOption[] = [];\r\n  /**\r\n   * Value of selected option.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) value: any;\r\n  /**\r\n   * Compact mode.\r\n   */\r\n  @Prop({ mutable: true }) compact: boolean;\r\n  /**\r\n   * Event call on option change.\r\n   */\r\n  @Event() selectChange: EventEmitter\r\n  /**\r\n   * Flag to control input focus.\r\n   */\r\n  hasFocus: boolean;\r\n  /**\r\n   * The instance of the FocusBehavior used to close the panel when the user clicks outside.\r\n   */\r\n  focusBehavior = new FocusBehavior(this);\r\n  /**\r\n   * Flag that control the panel visibility.\r\n   */\r\n  @State() isPanelOpen = false;\r\n\r\n  @Watch('isPanelOpen')\r\n  isShowingPanelDidUpdate() {\r\n    this.hasFocus = this.isPanelOpen;\r\n  }\r\n  componentDidLoad() {\r\n    if (this.options.length === 0) {\r\n      this.options = Array.from(this.host.querySelectorAll('ac-drop-option'))\r\n        .map((option: any) => {\r\n          return {\r\n          label: option.label || option.innerText.trim(),\r\n          value: option.value,\r\n          image: option.image\r\n        } as AcDropOption });\r\n      }\r\n    if (isNil(this.value) && this.options.length > 0) {\r\n        this.value = this.options[0].value;\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.isPanelOpen = false;\r\n  }\r\n  /**\r\n   * Toggle the panel view.\r\n   */\r\n  @Bind\r\n  whenBlur(element) {\r\n    // If the target element is'nt a child of the panel.\r\n    if (!this.selectPanel.contains(element)) {\r\n      if (this.isPanelOpen) {\r\n        this.isPanelOpen = !this.isPanelOpen;\r\n      }\r\n    }\r\n  }\r\n\r\n  @Bind\r\n  handlePanel() {\r\n    this.isPanelOpen = !this.isPanelOpen;\r\n  }\r\n\r\n  handleSelect(option: AcDropOption) {\r\n    this.isPanelOpen = !this.isPanelOpen;\r\n    this.value = option.value;\r\n    this.selectChange.emit(option);\r\n  }\r\n\r\n  render() {\r\n    const filterSelected = option => {\r\n      if (isNil(this.value)) {\r\n        return false;\r\n      }\r\n      if (isNil(option.value)) {\r\n        return false;\r\n      }\r\n      return option.value.toString() === this.value.toString()\r\n    };\r\n    const SelectPanel = this.SelectPanel;\r\n    return <Host class={{ 'ac-list': true }}>\r\n      <section style={{ display: 'none' }}>\r\n        <slot />\r\n      </section>\r\n      {this.options && this.options\r\n        .filter(filterSelected)\r\n        .map(x => (\r\n            <ac-button\r\n              class={{ 'ac-drop-down-menu__button': true, 'ac-drop-down-menu--compact': this.compact }}\r\n              theme={this.isPanelOpen ? 'primary' : 'light'}\r\n              onClick={this.handlePanel}\r\n              fill=\"flat\"\r\n            >\r\n                {x.image && <img slot=\"icon-start\" src={x.image} />}\r\n                <span>{x.label}</span>\r\n                {this.options.length > 0\r\n                  && <AcFaIcon slot=\"icon-end\" icon={this.isPanelOpen ? faChevronUp : faChevronDown} size={12} />}\r\n            </ac-button>\r\n        ))}\r\n      <SelectPanel\r\n        ref={selectPanel => this.selectPanel = selectPanel}\r\n        popperPivot={this.host}\r\n        reset={!this.isPanelOpen}\r\n      >\r\n          <ul class={{ 'ac-list': true, 'ac-drop-down-menu__list--compact': this.compact }}>\r\n            {this.options.map(option => (\r\n              <ac-drop-option class=\"ac-list__item\" label={option.label} onClick={() => this.handleSelect(option)}>\r\n                {option.image && <img src={option.image} slot=\"image\" class=\"ac-drop-down__image\" />}\r\n              </ac-drop-option>\r\n            ))}\r\n          </ul>\r\n      </SelectPanel>\r\n    </Host>\r\n  }\r\n}\r\n"]}