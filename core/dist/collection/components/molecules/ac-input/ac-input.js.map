{"version":3,"file":"ac-input.js","sourceRoot":"","sources":["../../../../src/components/molecules/ac-input/ac-input.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAC1F,OAAO,aAAa,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,iBAAiB,EAAsB,MAAM,kCAAkC,CAAC;AACzF,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD;;GAEG;AAKH,MAAM,OAAO,OAAO;;IAKlB;;OAEG;IACH,sBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;EAyHhD;;;KAGG;EAEH,cAAc,CAAC,KAAK;IAClB,IAAI,KAAK,EAAE;MACT,IAAI,KAAK,KAAK,MAAM,EAAE;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;OACnB;MACD,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC;MAC9B,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;KACrC;SAAM;MACL,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC;MAC/B,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;KACnC;EACH,CAAC;EAED;;KAEG;EAEH,cAAc;IACZ,6CAA6C;IAC7C,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,EAAE;MAC3B,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAC7D;EACH,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,aAAa;IACjB,6CAA6C;IAC7C,IAAI,IAAI,CAAC,KAAK,EAAE;MACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC7G;EACH,CAAC;EAGD,KAAK,CAAC,WAAW;IACf,IAAI,IAAI,CAAC,eAAe,EAAE;MACxB,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;KAC/E;EACH,CAAC;EAED;;;;;;KAMG;EAEH,KAAK,CAAC,QAAQ,CAAC,KAAK;IAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAEnB,2FAA2F;IAC3F,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;IAClC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;EACzC,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,WAAW,CAAC,IAAI,GAAG,MAAM;IAC7B,MAAM,KAAK,GAAG,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;IAC5E,IAAI,CAAC,KAAK,EAAE;MAAE,OAAO,IAAI,CAAC;KAAE;IAC5B,IAAI,IAAI,KAAK,MAAM,EAAE;MACnB,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;KACtD;SAAM;MACL,OAAO,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACtC;EACH,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,QAAQ;IACZ,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;EACrC,CAAC;EAGD,KAAK,CAAC,kBAAkB;IACtB,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;EAC3C,CAAC;EAGD,KAAK,CAAC,oBAAoB;IACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC;EAChC,CAAC;EAED,KAAK,CAAC,gBAAgB;IACpB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,aAAa,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;MAC9E,4BAA4B;MAC5B,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;OAC7D;KACF;EACH,CAAC;EAED,oBAAoB,KAAI,CAAC;EAEzB;;KAEG;EAEK,cAAc;IACpB,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC;EACnD,CAAC;EAED;;KAEG;EAEK,YAAY;IAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IAEpC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;IAClC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;EACzC,CAAC;EAED;;KAEG;EAEK,UAAU;IAChB,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;EACtC,CAAC;EAED,MAAM;IACJ,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC;IACzD,OAAO;MACL,qBACE,GAAG,EAAE,WAAW,CAAC,EAAE;UACjB,IAAI,CAAC,WAAW,GAAG,WAAkB,CAAC;QACxC,CAAC,EACD,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EACjD,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,MAAM,EAAE,IAAI,CAAC,UAAU,EACvB,WAAW,EAAE,IAAI,CAAC,WAAW;QAE7B,YAAM,IAAI,EAAC,YAAY,EAAC,IAAI,EAAC,YAAY,GAAG;QAC5C,YAAM,IAAI,EAAC,aAAa,EAAC,IAAI,EAAC,aAAa,GAAG;QAC7C,IAAI,CAAC,IAAI,KAAK,UAAU;UACvB,CAAC,CAAC,iBAAW,IAAI,EAAC,UAAU,EAAC,OAAO,EAAE,IAAI,CAAC,cAAc,qBAAY,IAAI,EAAC,MAAM;YAC5E,EAAC,QAAQ,IAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,GAAI,CACxB;UACd,CAAC,CAAC,YAAM,IAAI,EAAC,UAAU,EAAC,IAAI,EAAC,UAAU,GAAG,CAC9B;MAEhB,gFAAgF;MAChF,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,CAAC;QACxG,CAAC,CAAC,YAAM,KAAK,EAAC,uBAAuB,IAChC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,CACzlES;EADP,IAAI;6CAGJ;AAMO;EADP,IAAI;2CAMJ;AAMO;EADP,IAAI;yCAGJ","sourcesContent":["import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { Component, Element, Listen, Method, Prop, State, Watch, h } from '@stencil/core';\r\nimport vanillaMasker from 'vanilla-masker';\r\n\r\nimport { FormFieldBehavior, FormFieldComponent } from '../../../behaviors/form-behavior';\r\nimport { Bind } from '../../../utils/lang/bind';\r\nimport { CustomValidityState, ValidatorFn } from '../../../utils/validations/validations';\r\nimport { AcFaIcon } from '../../utils/ac-fa-icon';\r\n\r\n/**\r\n * Accera's full-featured Input Field web-component.\r\n */\r\n@Component({\r\n  tag: 'ac-input',\r\n  styleUrl: 'ac-input.scss',\r\n})\r\nexport class AcInput implements FormFieldComponent {\r\n  private acInputBase: HTMLAcInputBaseElement;\r\n\r\n  @Element() host: HTMLAcInputElement;\r\n\r\n  /**\r\n   * The FormFieldBehavior instance.\r\n   */\r\n  formFieldBehavior = new FormFieldBehavior(this);\r\n\r\n  /**\r\n   * The label text of the this input group.\r\n   */\r\n  @Prop() label: string;\r\n\r\n  /**\r\n   * The type of the internal input.\r\n   */\r\n  @Prop() type: string;\r\n\r\n  /**\r\n   * The helper text to guide the user.\r\n   */\r\n  @Prop() helperText: string;\r\n\r\n  /**\r\n   * Request check validation on each input key event.\r\n   */\r\n  @Prop() validateOnKeyup: boolean;\r\n\r\n  /**\r\n   * The value of the internal input.\r\n   */\r\n  @Prop({ mutable: true }) value: any;\r\n\r\n  /**\r\n   * Set the component in the error state with a message.\r\n   */\r\n  @Prop({ mutable: true }) error: string | boolean;\r\n\r\n  /**\r\n   * Get the last validity state from the checkValidity.\r\n   */\r\n  @Prop({ mutable: true }) validity: CustomValidityState;\r\n\r\n  /**\r\n   * The validations that this field need.\r\n   * This validations are checked on:\r\n   * - Blur event\r\n   * - Form submit event\r\n   * - Each keyUp event ONLY IF the validateOnKeyup property is present.\r\n   */\r\n  @Prop({ mutable: true }) validator: ValidatorFn | ValidatorFn[];\r\n\r\n  /**\r\n   * The mask of the input.\r\n   */\r\n  @Prop({ reflect: true }) mask: string;\r\n\r\n  /**\r\n   * The HTML input field's name.\r\n   */\r\n  @Prop({ reflect: true }) name: string;\r\n\r\n  /**\r\n   * The disabled mode.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n\r\n  /**\r\n   * The native HTMLInputElement required attribute.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean;\r\n\r\n  /**\r\n   * The native HTMLInputElement pattern attribute.\r\n   */\r\n  @Prop({ reflect: true }) pattern: string;\r\n\r\n  /**\r\n   * The native HTMLInputElement max attribute.\r\n   */\r\n  @Prop({ reflect: true }) max: number;\r\n\r\n  /**\r\n   * The native HTMLInputElement maxlength attribute.\r\n   */\r\n  @Prop({ reflect: true }) maxlength: number;\r\n\r\n  /**\r\n   * The native HTMLInputElement min attribute.\r\n   */\r\n  @Prop({ reflect: true }) min: number;\r\n\r\n  /**\r\n   * The native HTMLInputElement min attribute.\r\n   */\r\n  @Prop({ reflect: true }) minlength: number;\r\n\r\n  /**\r\n   * The native HTMLInputElement autofocus attribute.\r\n   */\r\n  @Prop({ reflect: true }) autofocus: boolean;\r\n\r\n  /**\r\n   * The native HTMLInputElement autocomplete attribute.\r\n   */\r\n  @Prop({ reflect: true }) autocomplete: string;\r\n\r\n  /**\r\n   * The native HTMLInputElement autocapitalize attribute.\r\n   */\r\n  @Prop({ reflect: true }) autocapitalize: string;\r\n\r\n  /**\r\n   * The native HTMLInputElement placeholder attribute.\r\n   */\r\n  @Prop({ reflect: true }) placeholder: string;\r\n\r\n  /**\r\n   * The native HTMLInputElement step attribute.\r\n   */\r\n  @Prop({ reflect: true }) step: number;\r\n\r\n  /**\r\n   * Used to toggle the password view.\r\n   */\r\n  @State() isShowingPassword: boolean;\r\n\r\n  /**\r\n   * Set the error state based on the error prop.\r\n   * @param error An error message.\r\n   */\r\n  @Watch('error')\r\n  errorDidUpdate(error) {\r\n    if (error) {\r\n      if (error === 'true') {\r\n        this.error = true;\r\n      }\r\n      this.acInputBase.error = true;\r\n      this.formFieldBehavior.setInvalid();\r\n    } else {\r\n      this.acInputBase.error = false;\r\n      this.formFieldBehavior.setValid();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies transformations when the value update.\r\n   */\r\n  @Watch('value')\r\n  valueDidUpdate() {\r\n    // Masking when value update programmatically\r\n    if (this.value && this.mask) {\r\n      this.value = vanillaMasker.toPattern(this.value, this.mask);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies transformations when the mask update.\r\n   */\r\n  @Watch('mask')\r\n  async maskDidUpdate() {\r\n    // Masking when value update programmatically\r\n    if (this.value) {\r\n      this.value = this.mask ? vanillaMasker.toPattern(this.value, this.mask) : await this.getRawValue(this.type);\r\n    }\r\n  }\r\n\r\n  @Listen('keyup')\r\n  async handleKeyup() {\r\n    if (this.validateOnKeyup) {\r\n      this.formFieldBehavior.checkValidity((await this.getNativeFormField()).value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the value and run validations as if the user change it manually.\r\n   * When to use each:\r\n   * input.value will only update the value, useful to set the initial value of the input.\r\n   * input.setValue is useful to use values that are automatically set by an user's action, setting the unchecked state\r\n   * to the form.\r\n   */\r\n  @Method()\r\n  async setValue(value) {\r\n    this.value = value;\r\n\r\n    // @TODO: Review how to set the dirty state in the form for programmatically value changes.\r\n    this.formFieldBehavior.setDirty();\r\n    this.formFieldBehavior.checkValidity();\r\n  }\r\n\r\n  /**\r\n   * Get the unmasked value.\r\n   */\r\n  @Method()\r\n  async getRawValue(type = 'text') {\r\n    const value = (await this.acInputBase.getNativeInput()).value || this.value;\r\n    if (!value) { return null; }\r\n    if (type === 'text') {\r\n      return value.toString().replace(/[^a-z0-9 ]+/ig, '');\r\n    } else {\r\n      return vanillaMasker.toNumber(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set focus state in the native input.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    return this.acInputBase.setFocus();\r\n  }\r\n\r\n  @Method()\r\n  async getNativeFormField() {\r\n    return this.acInputBase.getNativeInput();\r\n  }\r\n\r\n  @Method()\r\n  async getFormFieldBehavior() {\r\n    return this.formFieldBehavior;\r\n  }\r\n\r\n  async componentDidLoad() {\r\n    this.errorDidUpdate(this.error);\r\n    if (this.mask) {\r\n      vanillaMasker(await this.acInputBase.getNativeInput()).maskPattern(this.mask);\r\n      // Masking the initial value\r\n      if (this.value) {\r\n        this.value = vanillaMasker.toPattern(this.value, this.mask);\r\n      }\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {}\r\n\r\n  /**\r\n   * Toggle the password view.\r\n   */\r\n  @Bind\r\n  private togglePassword() {\r\n    this.isShowingPassword = !this.isShowingPassword;\r\n  }\r\n\r\n  /**\r\n   * Used as a listener to the change event. Dispatch form field validations.\r\n   */\r\n  @Bind\r\n  private handleChange() {\r\n    this.value = this.acInputBase.value;\r\n\r\n    this.formFieldBehavior.setDirty();\r\n    this.formFieldBehavior.checkValidity();\r\n  }\r\n\r\n  /**\r\n   * Used as a listener to the blur event. Dispatch form field validations.\r\n   */\r\n  @Bind\r\n  private handleBlur() {\r\n    this.formFieldBehavior.setTouched();\r\n  }\r\n\r\n  render() {\r\n    const icon = this.isShowingPassword ? faEyeSlash : faEye;\r\n    return [\r\n      <ac-input-base\r\n        ref={acInputBase => {\r\n          this.acInputBase = acInputBase as any;\r\n        }}\r\n        label={this.label}\r\n        name={this.name}\r\n        type={this.isShowingPassword ? 'text' : this.type}\r\n        pattern={this.pattern}\r\n        value={this.value}\r\n        disabled={this.disabled}\r\n        required={this.required}\r\n        max={this.max}\r\n        min={this.min}\r\n        maxlength={this.maxlength}\r\n        minlength={this.minlength}\r\n        step={this.step}\r\n        autofocus={this.autofocus}\r\n        autocomplete={this.autocomplete}\r\n        autocapitalize={this.autocapitalize}\r\n        onChange={this.handleChange}\r\n        onBlur={this.handleBlur}\r\n        placeholder={this.placeholder}\r\n      >\r\n        <slot name=\"item-start\" slot=\"item-start\" />\r\n        <slot name=\"input-label\" slot=\"input-label\" />\r\n        {this.type === 'password'\r\n          ? <ac-button slot=\"item-end\" onClick={this.togglePassword} icon-only fill=\"flat\">\r\n              <AcFaIcon icon={icon} size={14} />\r\n            </ac-button>\r\n          : <slot name=\"item-end\" slot=\"item-end\" />}\r\n      </ac-input-base>,\r\n\r\n      // Only present message if it is a string. Preventing unnecessary margin effect.\r\n      (this.error && typeof this.error === 'string') || (this.helperText && typeof this.helperText === 'string')\r\n        ? <span class=\"ac-input__helper-text\">\r\n            {this.error || this.helperText}\r\n          </span>\r\n        : null\r\n    ];\r\n  }\r\n}\r\n"]}