{"version":3,"file":"ac-layout.js","sourceRoot":"","sources":["../../../../src/components/templates/ac-layout/ac-layout.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAEtG,OAAO,EAAE,aAAa,EAAsB,MAAM,mCAAmC,CAAC;AACtF,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAEhD;;GAEG;AAMH,MAAM,OAAO,QAAQ;;IAInB,kBAAa,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;;;EAWxC,kBAAkB;IAChB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;EACnC,CAAC;EAED,gBAAgB;IACd,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,6CAA6C,CAAC,CAAC;EAC5F,CAAC;EAED,oBAAoB;EACpB,CAAC;EAED,QAAQ,CAAC,OAAO;IACd,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IACtC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE;MAChD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACvB;EACH,CAAC;EAID,mBAAmB;IACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC;EAChG,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAE;QACL,CAAC,cAAc,IAAI,CAAC,SAAS,YAAY,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS;OAC7D;MAED,WAAK,KAAK,EAAC,+BAA+B;QACxC,YAAM,IAAI,EAAC,UAAU,GAAE,CACnB;MACN,WAAK,KAAK,EAAC,8BAA8B;QACvC,YAAM,IAAI,EAAC,QAAQ,GAAE;QAErB,WACE,GAAG,EAAE,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,UAAU,EAC/C,KAAK,EAAC,2BAA2B,EACjC,QAAQ,EAAE,IAAI,CAAC,mBAAmB;UAElC,YAAM,IAAI,EAAC,SAAS,GAAG,CACnB,CACF,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AA5BC;EADC,IAAI;mDAGJ","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, Listen, Prop, Watch, h } from '@stencil/core';\r\n\r\nimport { FocusBehavior, FocusableComponent } from '../../../behaviors/focus-behavior';\r\nimport { Bind } from '../../../utils/lang/bind';\r\n\r\n/**\r\n * Accera's layout webcomponent.\r\n */\r\n@Component({\r\n  tag: 'ac-layout',\r\n  styleUrl: 'ac-layout.scss',\r\n  shadow: false\r\n})\r\nexport class AcLayout implements FocusableComponent {\r\n  @Element() host: HTMLAcLayoutElement;\r\n\r\n  contentElt: HTMLElement;\r\n  focusBehavior = new FocusBehavior(this);\r\n  focusTarget: HTMLElement;\r\n  hasFocus: boolean;\r\n\r\n  /**\r\n   * Collapse a nav drawer.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) collapsed: 'nav-left';\r\n  @Event() contentScroll: EventEmitter<{ top: number, left: number }>;\r\n\r\n  @Watch('collapsed')\r\n  collapsedDidUpdate() {\r\n    this.hasFocus = !!this.collapsed;\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.focusTarget = this.host.querySelector('.ac-layout__nav-left-container ac-navdrawer');\r\n  }\r\n\r\n  disconnectedCallback() {\r\n  }\r\n\r\n  whenBlur(element) {\r\n    console.log(element, element.dataset);\r\n    if (!element.dataset.navdrawer && this.collapsed) {\r\n      this.collapsed = null;\r\n    }\r\n  }\r\n\r\n  @Listen('resize', { target: 'window' })\r\n  @Bind\r\n  handleContentScroll() {\r\n    this.contentScroll.emit({ top: this.contentElt.scrollTop, left: this.contentElt.scrollLeft });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        class={{\r\n          [`ac-layout--${this.collapsed}-collapsed`]: !!this.collapsed,\r\n        }}\r\n      >\r\n        <div class=\"ac-layout__nav-left-container\">\r\n          <slot name=\"nav-left\"/>\r\n        </div>\r\n        <div class=\"ac-layout__content-container\">\r\n          <slot name=\"header\"/>\r\n\r\n          <div\r\n            ref={contentElt => this.contentElt = contentElt}\r\n            class=\"ac-layout__content-scroll\"\r\n            onScroll={this.handleContentScroll}\r\n          >\r\n            <slot name=\"content\" />\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}