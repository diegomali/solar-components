{"version":3,"file":"form-field-behavior.js","sourceRoot":"","sources":["../../../src/behaviors/form-behavior/form-field-behavior.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from 'debug/src/browser';\r\n\r\nimport { Bind } from '../../utils/lang/bind';\r\nimport { dashToCamelCase } from '../../utils/lang/string';\r\nimport { toArray } from '../../utils/lang/to-array';\r\nimport { ComponentBehavior } from '../../utils/stencil/component-behavior';\r\nimport { CustomValidityState, ValidatorFn } from '../../utils/validations/validations';\r\n\r\nimport { FormBehavior } from './form-behavior';\r\nimport { FormFieldComponent } from './form-field-component';\r\nimport { HTMLCustomFormElement } from './html-custom-form-element';\r\n\r\nconst log = debug('solar:FormFieldBehavior');\r\n\r\n/**\r\n * Adds form field features to a component, such as validations.\r\n */\r\nexport class FormFieldBehavior extends ComponentBehavior<FormFieldComponent> {\r\n\r\n  /**\r\n   * The form that this field is attached\r\n   */\r\n  private formAttached?: HTMLCustomFormElement;\r\n\r\n  /**\r\n   * The name of the field to use in the form.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * True if the value of this field is valid.\r\n   * Note that needs to call `validate` to ensure it.\r\n   */\r\n  isValid: boolean;\r\n\r\n  /**\r\n   * True if the user has interacted with this field before.\r\n   */\r\n  isTouched: boolean;\r\n\r\n  /**\r\n   * True if the user has changed this field's value before.\r\n   */\r\n  isDirty: boolean;\r\n\r\n  /**\r\n   * If this field is in a form, attach to it and initialize the FormLogic.\r\n   */\r\n  attach() {\r\n    this.name = this.component.name;\r\n    this.formAttached = this.component.host.closest('form') as HTMLCustomFormElement;\r\n\r\n    if (this.formAttached) {\r\n      log('Attaching', this.name, this.formAttached);\r\n      if (!this.formAttached.formBehavior) {\r\n        this.formAttached.formBehavior = FormBehavior.forNative(this.formAttached);\r\n      }\r\n      this.formAttached.formBehavior.addField(this);\r\n    }\r\n\r\n    this.component.host.addEventListener('invalid', this.checkValidity);\r\n  }\r\n\r\n  /**\r\n   * Removes this field from FormLogic, to ignore it validations.\r\n   */\r\n  detach() {\r\n    if (this.formAttached) {\r\n      log('Detaching', this.name, this.formAttached);\r\n      this.formAttached.formBehavior.removeField(this);\r\n    }\r\n\r\n    this.component.host.removeEventListener('invalid', this.checkValidity);\r\n  }\r\n\r\n  /**\r\n   * Set the field in the dirty state.\r\n   */\r\n  setDirty() {\r\n    log('Set dirty', this.name, this.formAttached);\r\n    this.component.host.classList.add('form-field--dirty');\r\n    this.isDirty = true;\r\n\r\n    if (this.formAttached) { this.formAttached.formBehavior.setUnchecked(); }\r\n  }\r\n\r\n  /**\r\n   * Set the field in the touched state.\r\n   */\r\n  setTouched() {\r\n    log('Set touched', this.name);\r\n    this.component.host.classList.add('form-field--touched');\r\n    this.isTouched = true;\r\n  }\r\n\r\n  /**\r\n   * Set the field in the valid state.\r\n   */\r\n  setValid() {\r\n    log('Set valid', this.name);\r\n    this.component.host.classList.add('form-field--valid');\r\n    this.component.host.classList.remove('form-field--invalid');\r\n\r\n    this.isValid = true;\r\n  }\r\n\r\n  /**\r\n   * Set the field in the invalid state\r\n   */\r\n  setInvalid() {\r\n    log('Set invalid', this.name);\r\n    this.component.host.classList.add('form-field--invalid');\r\n    this.component.host.classList.remove('form-field--valid');\r\n\r\n    this.isValid = false;\r\n  }\r\n\r\n  /**\r\n   * Cleans all the states, error and value of the field.\r\n   */\r\n  cleanup() {\r\n    log('Cleaning up', this.name);\r\n    this.component.host.classList.remove(\r\n      'form-field--invalid', 'form-field--valid', 'form-field--touched', 'form-field--dirty'\r\n    );\r\n    this.component.value = undefined;\r\n    this.component.error = undefined;\r\n    this.isValid = undefined;\r\n    this.isTouched = undefined;\r\n    this.isDirty = undefined;\r\n  }\r\n\r\n  /**\r\n   * Runs the all the validations of the field and sets the component's validity.\r\n   */\r\n  @Bind\r\n  async checkValidity(value?: any): Promise<CustomValidityState> {\r\n    const valueToAssert = value || this.component.value || '';\r\n    log('Validating', this.name, '=', valueToAssert);\r\n\r\n    let validityState: CustomValidityState = { valid: true };\r\n    const validators = toArray(this.component.validator);\r\n\r\n    const nativeFormField = this.component.getNativeFormField ? await this.component.getNativeFormField() : null;\r\n    if (nativeFormField) {\r\n      const nativeValidity = nativeFormField.validity;\r\n      validityState.badInput = nativeValidity.badInput;\r\n      validityState.customError = nativeValidity.customError;\r\n      validityState.patternMismatch = nativeValidity.patternMismatch;\r\n      validityState.rangeOverflow = nativeValidity.rangeOverflow;\r\n      validityState.rangeUnderflow = nativeValidity.rangeUnderflow;\r\n      validityState.stepMismatch = nativeValidity.stepMismatch;\r\n      validityState.tooLong = nativeValidity.tooLong;\r\n      validityState.tooShort = nativeValidity.tooShort;\r\n      validityState.typeMismatch = nativeValidity.typeMismatch;\r\n      validityState.valid = nativeValidity.valid;\r\n      validityState.valueMissing = nativeValidity.valueMissing;\r\n    }\r\n\r\n    // Running all validator functions\r\n    const formBehavior = this.formAttached ? this.formAttached.formBehavior : null;\r\n    for (const fn of validators) {\r\n      let state;\r\n      try {\r\n        const exec = fn(valueToAssert, this, formBehavior);\r\n        state = exec instanceof Promise ? await exec : exec;\r\n      } catch (err) {\r\n        log('Error in validator function', fn.name, err);\r\n      }\r\n\r\n      if (state) {\r\n        // Assign the custom validity tokens.\r\n        validityState = { ...validityState, ...state };\r\n\r\n        // If in the last verification it still valid\r\n        // so we gonna check the overall state again.\r\n        const { valid: stillValid, ...validityTokens } = validityState;\r\n        if (stillValid) {\r\n          validityState.valid = !Object.values(validityTokens)\r\n            .find(hasError => !!hasError);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validityState.valid) {\r\n      this.component.error = null;\r\n      this.setValid();\r\n    } else {\r\n      this.component.error = this.buildErrorMessageByValidityState(validityState) || true;\r\n      this.setInvalid();\r\n      this.component.host.dispatchEvent(\r\n        new CustomEvent('formFieldInvalid', { detail: validityState })\r\n      );\r\n    }\r\n\r\n    this.component.validity = validityState;\r\n\r\n    return validityState;\r\n  }\r\n\r\n  /**\r\n   * Add a validator to the validation pipeline.\r\n   * @param validator The validation function.\r\n   */\r\n  addValidator(validator: ValidatorFn) {\r\n    if (!this.component.validator) {\r\n      this.component.validator = [];\r\n    } else if (!(this.component.validator instanceof Array)) {\r\n      this.component.validator = [ this.component.validator ];\r\n    }\r\n    this.component.validator.push(validator);\r\n\r\n    return this;\r\n  }\r\n\r\n  getCustomErrorMessagesFromInlineAttrs() {\r\n    const attrs = this.component.host.attributes;\r\n\r\n    return Object.keys(attrs)\r\n      .map(key => attrs[key].name)\r\n      .filter(key => key.indexOf('-message') > -1)\r\n      .reduce((acc, key) => {\r\n        acc[dashToCamelCase(key)] = attrs[key].value;\r\n        return acc;\r\n      }, {});\r\n  }\r\n\r\n  getErrorMessages() {\r\n    return this.getCustomErrorMessagesFromInlineAttrs();\r\n  }\r\n\r\n  buildErrorMessageByValidityState(validityState: CustomValidityState) {\r\n    const messages = this.getErrorMessages();\r\n\r\n    for (const token in validityState) {\r\n      if (validityState[token] && token !== 'valid') {\r\n        if (typeof validityState[token] === 'string') {\r\n          return validityState[token];\r\n        } else {\r\n          return messages[token + 'Message'];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}