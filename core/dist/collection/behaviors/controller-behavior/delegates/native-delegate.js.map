{"version":3,"file":"native-delegate.js","sourceRoot":"","sources":["../../../../src/behaviors/controller-behavior/delegates/native-delegate.ts"],"names":[],"mappings":";;;;;;;;;;;AAGA;;GAEG;AACH,MAAM,OAAO,cAAc;EACzB,eAAe,CAA+B,GAAW,EAAE,OAAO;IAChE,MAAM,EAAE,SAAS,EAAE,cAAc,KAAe,OAAO,EAAjB,KAAK,UAAK,OAAO,EAAjD,+BAAuC,CAAU,CAAC;IAExD,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAM,CAAC;IACjD,IAAI,KAAK,EAAE;MACT,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAC/B,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;UAClC,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;SACvC;aAAM;UACL,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;SAC3B;MACH,CAAC,CAAC,CAAC;KACJ;IAED,IAAI,SAAS,EAAE;MACb,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;QACjC,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;OAC/B;WAAM;QACL,kCAAkC;QAClC,IAAI,cAAc,EAAE;UAClB,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;SAC1C;QACD,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;OAChC;KACF;IAED,OAAO,OAAO,CAAC;EACjB,CAAC;EAED,KAAK,CAAC,eAAe,CAAC,OAAoB,EAAE,OAAO;IACjD,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC7B,MAAM,OAAO,CAAC,gBAAgB,EAAE,CAAC;EACnC,CAAC;EAED,aAAa;EACb,iBAAiB,CAAC,OAAY,EAAE,KAAK;IACjC,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;EAC5B,CAAC;CACF;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","sourcesContent":["import { HTMLStencilElement } from '@stencil/core/internal';\r\nimport { FrameworkDelegate } from './framework-delegate';\r\n\r\n/**\r\n * The default framework delegate.\r\n */\r\nexport class NativeDelegate implements FrameworkDelegate {\r\n  createComponent<E extends HTMLStencilElement>(tag: string, options): E {\r\n    const { component, componentProps, ...props } = options;\r\n\r\n    const element = document.createElement(tag) as E;\r\n    if (props) {\r\n      Object.keys(props).forEach(key => {\r\n        if (typeof props[key] === 'string') {\r\n          element.setAttribute(key, props[key]);\r\n        } else {\r\n          element[key] = props[key];\r\n        }\r\n      });\r\n    }\r\n\r\n    if (component) {\r\n      if (typeof component === 'string') {\r\n        element.innerHTML = component;\r\n      } else {\r\n        // The component is a HTMLElement:\r\n        if (componentProps) {\r\n          Object.assign(component, componentProps);\r\n        }\r\n        element.appendChild(component);\r\n      }\r\n    }\r\n\r\n    return element;\r\n  }\r\n\r\n  async attachViewToDom(domRoot: HTMLElement, element) {\r\n    domRoot.appendChild(element);\r\n    await element.componentOnReady();\r\n  }\r\n\r\n  // @ts-ignore\r\n  detachViewFromDom(element: any, props): Promise<void> {\r\n      return element.remove();\r\n  }\r\n}\r\n\r\nexport const nativeDelegate = new NativeDelegate();\r\n"]}