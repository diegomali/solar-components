{"version":3,"file":"create-controller-portal.js","sourceRoot":"","sources":["../../../src/behaviors/controller-behavior/create-controller-portal.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAA8B,CAAC,EAAE,MAAM,eAAe,CAAC;AAI9D;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAI,aAAa;EAGrD,+CAA+C;EAC/C,IAAI,MAAM,CAAC;EACX,IAAI,SAAS,CAAC;EAEd,OAAO,CAAC,KAAoE,EAAE,QAAyB,EAAE,EAAE;IACzG,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,KAAmB,KAAK,EAAnB,SAAS,UAAK,KAAK,EAA/D,gCAAuD,CAAQ,CAAC;IAEtE,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE;MACrB,aAAa,CAAC,MAAM,iCACb,KAAK,KACR,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;UACvB,SAAS,GAAG,GAAG,CAAC;UAChB,OAAO,EAAC,SAAS,oBAAK,SAAS,IAAE,GAAG,EAAE,GAAG,KAAG,QAAQ,CAAa,CAAC;QACpE,CAAC,IACD;SACD,IAAI,CAAC,GAAG,CAAC,EAAE;QACV,IAAI,WAAW,EAAE;UAAE,WAAW,CAAC,GAAG,CAAC,CAAC;SAAE;QACtC,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC;MAC7B,CAAC,CAAC,CAAC;KACN;SAAM,IAAI,CAAC,KAAK,EAAE;MACjB,MAAM,CAAC,SAAS,GAAG,EAAC,SAAS,oBAAK,SAAS,GAAG,QAAQ,CAAa,CAAC;MACpE,MAAM,CAAC,WAAW,EAAE,CAAC;KACtB;SAAM;MACL,4CAA4C;MAC5C,IAAI,MAAM,EAAE;QACV,IAAI,YAAY,EAAE;UAChB,YAAY,EAAE,CAAC;SAChB;QACD,MAAM,CAAC,MAAM,EAAE,CAAC;QAChB,MAAM,GAAG,IAAI,CAAC;OACf;KACF;IAED,iBAAiB;IACjB,OAAO,IAAI,CAAC;EACd,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { FunctionalComponent, VNode, h } from '@stencil/core';\r\n\r\nimport { ControlledElementFields, ControllerComponentOptions } from './controller-behavior';\r\n\r\n/**\r\n * Used to create a Component that dispatch a ControllerComponent#set directly from a render tree.\r\n * This will pass the vchildren as a render function to the controller to render it through the portal.\r\n * @param controllerRef The reference of the controller element to dispatch.\r\n */\r\nexport function createControllerPortal<C>(controllerRef)\r\n  : FunctionalComponent<ControllerComponentOptions<C> & ControlledElementFields> {\r\n\r\n  // Controls the host created by the controller.\r\n  let portal;\r\n  let TargetTag;\r\n\r\n  return (props: ControllerComponentOptions<C> & ControlledElementFields | any, children: VNode | VNode[]) => {\r\n    const { ref: refCallback, reset, onDidDismiss, ...restProps } = props;\r\n\r\n    if (!portal && !reset) {\r\n      controllerRef.create({\r\n          ...props,\r\n          render: ({ ref, Tag }) => {\r\n            TargetTag = Tag;\r\n            return <TargetTag {...restProps} ref={ref}>{children}</TargetTag>;\r\n          }\r\n        })\r\n        .then(elt => {\r\n          if (refCallback) { refCallback(elt); }\r\n          portal = elt.parentElement;\r\n        });\r\n    } else if (!reset) {\r\n      portal.vchildren = <TargetTag {...restProps}>{children}</TargetTag>;\r\n      portal.forceUpdate();\r\n    } else {\r\n      // Clears the host if the reset prop is true\r\n      if (portal) {\r\n        if (onDidDismiss) {\r\n          onDidDismiss();\r\n        }\r\n        portal.remove();\r\n        portal = null;\r\n      }\r\n    }\r\n\r\n    // void component\r\n    return null;\r\n  };\r\n}\r\n"]}