{"version":3,"file":"serialize-form.js","sourceRoot":"","sources":["../../src/utils/serialize-form.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AAYvE;;;;GAIG;AACH,MAAM,UAAU,aAAa,CAAC,IAAqB,EAAE,UAAgC,EAAE;EACrF,MAAM,GAAG,GAAG,EAAE,CAAC;EAEf,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAC7G,OAAO,CAAC,KAAK,CAAC,EAAE;IACf,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC7G,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,iBAAiB;UACpB,MAAM,OAAO,GAAG,EAAE,CAAC;UACnB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzD,IAAI,MAAM,CAAC,QAAQ,EAAE;cAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAAE;UACtD,CAAC,CAAC,CAAC;UACH,oBAAoB,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;UAC/C,MAAM;QAER,KAAK,UAAU;UACb,IAAI,KAAK,CAAC,OAAO,EAAE;YAAE,oBAAoB,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;WAAE;QACrE,KAAK,OAAO;UACV,IAAI,KAAK,CAAC,OAAO,EAAE;YAAE,oBAAoB,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;WAAE;UAC1E,MAAM;QAER;UACE,IAAI,KAAK,CAAC,KAAK,EAAE;YAAE,oBAAoB,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;WAAE;UACxE,MAAM;OACT;KACF;EACH,CAAC,CAAC,CAAC;EAEL,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import { assignByFormDataPath } from './lang/assign-by-form-data-path';\r\n\r\n/**\r\n * The options that can be passed to the serializeForm function.\r\n */\r\nexport interface SerializeFormOptions {\r\n  /**\r\n   * The function will ignore fields that has the disabled property.\r\n   */\r\n  ignoreDisabled?: boolean;\r\n}\r\n\r\n/**\r\n * Serialize a Form element to JSON.\r\n * @param form The target form element.\r\n * @param options A set of custom options.\r\n */\r\nexport function serializeForm(form: HTMLFormElement, options: SerializeFormOptions = {}) {\r\n  const obj = {};\r\n\r\n  Array.prototype.slice.call(form.querySelectorAll('[name]' + (options.ignoreDisabled ? ':not([disabled])' : '')))\r\n    .forEach(field => {\r\n      if (field.name && ['file', 'reset', 'button'].indexOf(field.type) === -1 && field.tagName.indexOf('-') === -1) {\r\n        switch (field.type) {\r\n          case 'select-multiple':\r\n            const options = [];\r\n            Array.prototype.slice.call(field.options).forEach(option => {\r\n              if (option.selected) { options.push(option.value); }\r\n            });\r\n            assignByFormDataPath(obj, field.name, options);\r\n            break;\r\n\r\n          case 'checkbox':\r\n            if (field.checked) { assignByFormDataPath(obj, field.name, true); }\r\n          case 'radio':\r\n            if (field.checked) { assignByFormDataPath(obj, field.name, field.value); }\r\n            break;\r\n\r\n          default:\r\n            if (field.value) { assignByFormDataPath(obj, field.name, field.value); }\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n  return obj;\r\n}\r\n"]}