{"version":3,"file":"animation.js","sourceRoot":"","sources":["../../src/utils/animation.ts"],"names":[],"mappings":"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","sourcesContent":["function cssDurationToMilis(duration) {\r\n  // Prevent errors with .xxx values\r\n  const time = duration.startsWith('.') ? '0' + duration : duration;\r\n\r\n  if (time.endsWith('ms')) { return parseInt(time); } else { return parseFloat(time) * 1000; }\r\n}\r\n\r\n/**\r\n * Start an element animation pipeline.\r\n */\r\nexport function animate(element: HTMLElement): Promise<AnimationProperties> {\r\n  /* @TODO: returns null in firefox even for elements with transition. */\r\n  const declaredTransition = window.getComputedStyle(element).transition.match(/\\.?\\d[ms]/g);\r\n  if (!declaredTransition) { return new Promise(resolve => resolve({ element, duration: 0 })); }\r\n\r\n  let duration = 0;\r\n  declaredTransition.forEach(t => {\r\n    const dur = cssDurationToMilis(t);\r\n    duration = duration < dur ? dur : duration;\r\n  });\r\n\r\n  return new Promise(res => res({ element, duration }));\r\n}\r\n\r\n/**\r\n * Set transition properties to the animation.\r\n * @param timing The CSS transition timing function.\r\n * @param transitionDur The duration in milliseconds.\r\n * @param property The specific property that this transition rule is applied.\r\n */\r\nexport function transition(timing: string, transitionDur: number, property?: string): AnimationTransformFunction {\r\n  return ({ element, duration }) => {\r\n    element.style.transition = `${property || ''} ${timing} ${transitionDur}ms`;\r\n    const newDuration = duration < transitionDur ? transitionDur : duration;\r\n\r\n    return new Promise(res => res({ element, duration: newDuration }));\r\n  };\r\n}\r\n\r\n/**\r\n * Apply CSS classes to this element.\r\n * @param classList A list of CSS classes to apply.\r\n */\r\nexport function addClass(...classList): AnimationTransformFunction {\r\n  return ({ element, duration }) => {\r\n    element.classList.add(...classList);\r\n    return new Promise(res => res({ element, duration }));\r\n  };\r\n}\r\n\r\n/**\r\n * Remove CSS classes from this element.\r\n * @param classList A list of CSS classes to remove.\r\n */\r\nexport function removeClass(...classList): AnimationTransformFunction {\r\n  return ({ element, duration }) => {\r\n    element.classList.remove(...classList);\r\n    return new Promise(res => res({ element, duration }));\r\n  };\r\n}\r\n\r\n/**\r\n * Add inline style to this element.\r\n * @param style A style object to set in the element.\r\n */\r\nexport function addStyle(style: ElementStyle): AnimationTransformFunction {\r\n  return ({ element, duration }) => {\r\n    Object.assign(element.style, style);\r\n    return new Promise(res => res({ element, duration }));\r\n  };\r\n}\r\n\r\n/**\r\n * Wait the end of the transition.\r\n * @param delay An optional delay to add to the animation execution.\r\n */\r\nexport function wait(delay = 0): AnimationTransformFunction {\r\n  return ({ element, duration }) => {\r\n    return new Promise(res => setTimeout(() => res({ element, duration }), duration + delay));\r\n  };\r\n}\r\n\r\n/**\r\n * Represents a set of CSS properties.\r\n */\r\ntype ElementStyle = {\r\n  [key in keyof CSSStyleDeclaration]?: string | null\r\n};\r\n\r\n/**\r\n * Represents the current properties from an animation pipeline.\r\n */\r\nexport interface AnimationProperties {\r\n  element: HTMLElement;\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * Represents a function that modifies the animation in a pipeline.\r\n */\r\ntype AnimationTransformFunction = (AnimationProperties) => Promise<AnimationProperties>;\r\n"]}