{"file":"ac-toast-controller.entry.cjs.js","mappings":";;;;;;;;MAaa,iBAAiB;;;IAC5B,uBAAkB,GAAG,IAAIA,qCAAkB,CAAC,IAAI,CAAC,CAAC;IAElD,WAAM,GAAG,UAAU,CAAC;IAEpB,cAAS,GAAgE,EAAE,CAAC;;;EAO5E,MAAM,MAAM,CAAC,KAA0C;IACrD,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAQ,CAAC;IAC5D,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;IACvB,OAAO,CAAC,QAAQ,GAAG,mBAAmB,CAAC;IACvC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IAExB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAE1D,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE;MAC9B,OAAO,CAAC,MAAM,EAAE,CAAC;KAClB,CAAC,CAAC;IAEH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAE3B,UAAU,CAAC;MACT,OAAO,CAAC,MAAM,EAAE,CAAA;KACjB,EAAE,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;IAEvB,OAAO,KAAK,CAAC;GACd;EAGD,MAAM,OAAO,CAAC,IAAI;IAChB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;IACtC,OAAO,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;GAC/B;EAED,oBAAoB;GACnB;;;;;;","names":["ControllerBehavior"],"sources":["./src/components/atoms/ac-toast/ac-toast-controller/ac-toast-controller.tsx"],"sourcesContent":["import { Component, Element, Method, Prop } from '@stencil/core';\r\n\r\nimport {\r\n  ControllerBehavior,\r\n  ControllerComponent,\r\n  ControllerComponentOptions, HTMLStencilControlledElement,\r\n} from '../../../../behaviors/controller-behavior/controller-behavior';\r\nimport { AcToast } from '../ac-toast';\r\n\r\n@Component({\r\n  tag: 'ac-toast-controller',\r\n})\r\n\r\nexport class AcToastController implements ControllerComponent<AcToast, HTMLAcToastElement> {\r\n  controllerBehavior = new ControllerBehavior(this);\r\n\r\n  target = 'ac-toast';\r\n\r\n  toastList: HTMLStencilControlledElement<AcToast, HTMLAcToastElement>[] = [];\r\n\r\n  @Element() host: HTMLElement;\r\n\r\n  @Prop() bound: string;\r\n\r\n  @Method()\r\n  async create(props: ControllerComponentOptions<AcToast>) {\r\n    const wrapper = document.createElement('ac-overlay') as any;\r\n    wrapper.noLayer = true;\r\n    wrapper.position = 'flex-end flex-end';\r\n    props.wrapper = wrapper;\r\n\r\n    const toast = await this.controllerBehavior.create(props);\r\n\r\n    toast.addEventListener('close', () => {\r\n      wrapper.remove();\r\n    });\r\n\r\n    this.toastList.push(toast);\r\n\r\n    setTimeout(() => {\r\n      wrapper.remove()\r\n    }, props.time || 3000);\r\n\r\n    return toast;\r\n  }\r\n\r\n  @Method()\r\n  async dismiss(data) {\r\n    const topToast = this.toastList.pop();\r\n    return topToast.dismiss(data);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n  }\r\n\r\n}\r\n"],"version":3}