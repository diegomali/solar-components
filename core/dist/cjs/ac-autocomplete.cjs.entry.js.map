{"file":"ac-autocomplete.entry.cjs.js","mappings":"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","names":["AsyncDataBehavior","FormFieldBehavior","createControllerPortal","ensureController","FocusBehavior","h","Host","AcFaIcon","faSpinner","index","Bind","Debounced"],"sources":["./src/components/molecules/ac-autocomplete/ac-autocomplete.scss?tag=ac-autocomplete","./src/components/molecules/ac-autocomplete/ac-autocomplete.tsx"],"sourcesContent":["@import \"../../../theme/variables\";\r\n\r\n.ac-autocomplete {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n\r\n  .ac-autocomplete__icon {\r\n    margin: $spacer-tiny;\r\n  }\r\n}","import { Component, Prop, h, Host, Element, State, Watch, Method, EventEmitter, Event } from '@stencil/core';\r\n\r\nimport { AsyncDataBehavior, AsyncDataComponent, AsyncMetadata } from '../../../behaviors/async-data-behavior';\r\nimport { AcOption } from '../../../utils/types/ac-option';\r\nimport { createControllerPortal } from '../../../behaviors/controller-behavior/create-controller-portal';\r\nimport { AcPanel } from '../../organisms/ac-panel/ac-panel';\r\nimport { AcPopper } from '../../portals/ac-popper/ac-popper';\r\nimport { ensureController } from '../../../utils/stencil/ensure-controller';\r\nimport { Bind } from '../../../utils/lang/bind';\r\nimport { Debounced } from '../../../utils/lang/reactivity';\r\nimport { FocusBehavior } from '../../../behaviors/focus-behavior';\r\nimport { FormFieldComponent, FormFieldBehavior } from '../../../behaviors/form-behavior';\r\nimport { ValidatorFn, CustomValidityState } from '../../../utils/validations/validations';\r\nimport { AcFaIcon } from '../../utils/ac-fa-icon';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  tag: 'ac-autocomplete',\r\n  styleUrl: 'ac-autocomplete.scss'\r\n})\r\nexport class AcAutocomplete implements AsyncDataComponent<AutocompleteFetchParams, AcOption[]>, FormFieldComponent {\r\n\r\n  /**\r\n   * A reference to the component element.\r\n   */\r\n  @Element() host: HTMLElement;\r\n  /**\r\n   * A reference to the ac-input-base component.\r\n   */\r\n  acInputBase: HTMLAcInputBaseElement;\r\n  /**\r\n   * The name of the internal input.\r\n   */\r\n  @Prop({ reflect: true }) name: string;\r\n  /**\r\n   * Set the disabled mode.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  /**\r\n   * The native required attribute.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean;\r\n  /**\r\n   * Set the custom empty result text.\r\n   */\r\n  @Prop({ reflect: true }) noResultsLabel = 'No results for';\r\n  /**\r\n   * Action to be call when the user start typing.\r\n   */\r\n  @Prop({ mutable: true }) fetch: (params: { filter: string }) => Promise<AsyncMetadata<AcOption[]>>;\r\n  /**\r\n   * Set the loading mode, showing a loading icon.\r\n   */\r\n  @Prop() loading: boolean;\r\n  /**\r\n   * The options that will be displayed in the panel.\r\n   */\r\n  @Prop({ mutable: true }) options: AcOption[] = [];\r\n    /**\r\n   * The validator functions.\r\n   */\r\n  @Prop({ mutable: true }) validator: ValidatorFn | ValidatorFn[];\r\n  /**\r\n   * Set the field in the error state with a message.\r\n   */\r\n  @Prop({ mutable: true }) error: string | boolean;\r\n  /**\r\n   * Select size\r\n   */\r\n  @Prop({ mutable: true }) size: 'small' | 'large';\r\n  /**\r\n   * The label text of the input.\r\n   */\r\n  @Prop() label: string;\r\n  /**\r\n   * The value of the input.\r\n   */\r\n  @Prop() value: any;\r\n  /**\r\n   * The text that will be displayed on the select input based on it value.\r\n   */\r\n  @State() selectedText: string;\r\n  /**\r\n   * The filter text used to search through the options.\r\n   */\r\n  @State() filter: string;\r\n\r\n  /**\r\n   * Flag that control the panel visibility.\r\n   */\r\n  @State() isPanelOpen = false;\r\n\r\n  asyncDataBehavior: AsyncDataBehavior<AutocompleteFetchParams, AcOption[]> = new AsyncDataBehavior<AutocompleteFetchParams, AcOption[]>(this);\r\n  /**\r\n   * The instance of the FormFieldBehavior.\r\n   */\r\n  formFieldBehavior: FormFieldBehavior = new FormFieldBehavior(this);\r\n\r\n  /**\r\n   * Flag to control input focus.\r\n   */\r\n  hasFocus: boolean;\r\n  /**\r\n   * Use to request a formFieldBehavior.checkValidity call.\r\n   */\r\n  requestCheckValidity: boolean = false;\r\n  /**\r\n   * The validity state.\r\n   */\r\n  @Prop({ mutable: true }) validity: CustomValidityState;\r\n    /**\r\n   * Fired when the user select an option.\r\n   */\r\n  @Event() selectChange: EventEmitter<any>;\r\n\r\n  private SelectPanel = createControllerPortal<AcPanel & AcPopper>(ensureController('ac-panel-controller'));\r\n  /**\r\n   * A reference to the ac-panel.\r\n   */\r\n  private selectPanel: HTMLAcPanelElement;\r\n\r\n  /**\r\n   * The instance of the FocusBehavior used to close the panel when the user clicks outside.\r\n   */\r\n  focusBehavior = new FocusBehavior(this);\r\n\r\n  @Watch('error')\r\n  errorDidUpdate(error) {\r\n    if (error) {\r\n      this.acInputBase.error = true;\r\n      this.formFieldBehavior.setInvalid();\r\n    } else {\r\n      this.acInputBase.error = false;\r\n      this.formFieldBehavior.setValid();\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async getFormFieldBehavior() {\r\n    return this.formFieldBehavior;\r\n  }\r\n\r\n  @Bind\r\n  handleSelected(option: AcOption) {\r\n    this.selectedText = option.title;\r\n    this.value = option.value;\r\n    this.requestCheckValidity = true;\r\n    this.formFieldBehavior.setDirty();\r\n    this.filter = null;\r\n    this.isPanelOpen = false;\r\n  }\r\n\r\n\r\n  @Bind\r\n  @Debounced(200)\r\n  private async handleDebouncedKeyUp(event) {\r\n    const { target: { value } } = event;\r\n    this.filter = value;\r\n    this.asyncDataBehavior.executeFetch();\r\n  }\r\n\r\n  getFetchParams() {\r\n    return { filter: this.filter };\r\n  }\r\n\r\n\r\n  @Watch('isPanelOpen')\r\n  isShowingPanelDidUpdate() {\r\n    this.hasFocus = this.isPanelOpen;\r\n  }\r\n\r\n  whenReceiveData(metaData: AsyncMetadata<AcOption[]>) {\r\n    this.options = metaData.data;\r\n    this.isPanelOpen = true;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.requestCheckValidity) {\r\n      this.formFieldBehavior.checkValidity(this.value);\r\n      this.requestCheckValidity = false;\r\n      this.selectChange.emit(this.value);\r\n    }\r\n  }\r\n  /**\r\n   * Toggle the panel view.\r\n   */\r\n  whenBlur(element) {\r\n    // If the target element is'nt a child of the panel.\r\n    if (!this.selectPanel.contains(element)) {\r\n      if (this.isPanelOpen) {\r\n        this.isPanelOpen = !this.isPanelOpen;\r\n      }\r\n      if (this.requestCheckValidity === false && this.isPanelOpen === false) {\r\n        if (!this.options.some(x => x.title.toString().toUpperCase().includes(this.acInputBase.value.toUpperCase()))) {\r\n          this.acInputBase.value = '';\r\n        }\r\n      }\r\n      this.formFieldBehavior.setTouched();\r\n    }\r\n  }\r\n  disconnectedCallback() {\r\n    this.isPanelOpen = false;\r\n  }\r\n\r\n  render() {\r\n    const SelectPanel = this.SelectPanel;\r\n    return <Host class=\"ac-autocomplete\">\r\n      <ac-input-base\r\n            ref={acInputBase => this.acInputBase = acInputBase}\r\n            class=\"ac-autocomplete__input\"\r\n            name={this.name}\r\n            disabled={this.disabled}\r\n            type=\"text\"\r\n            label={this.label}\r\n            value={this.selectedText}\r\n            onKeyUp={this.handleDebouncedKeyUp}\r\n            size={this.size}\r\n          >\r\n            {this.loading && <AcFaIcon slot=\"item-end\" class=\"ac-autocomplete__icon\" icon={faSpinner} size={14} anim=\"spin\"/>}\r\n      </ac-input-base>\r\n      <SelectPanel\r\n            ref={selectPanel => this.selectPanel = selectPanel}\r\n            class=\"ac-autocomplete__panel\"\r\n            popperPivot={this.host}\r\n            reset={!this.isPanelOpen}>\r\n          <ul class=\"ac-autocomplete__list ac-list\">\r\n            {this.options.length === 0\r\n              ?  <li class=\"ac-list__item\">\r\n                  {this.noResultsLabel} {this.filter}\r\n                </li>\r\n              : this.options.map((option, index) => (\r\n                <li\r\n                  class=\"ac-list__item\"\r\n                  key={index}\r\n                  tabIndex={index}\r\n                  value={option.value}\r\n                  onClick={() => this.handleSelected(option)}>\r\n                  {option.title}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </SelectPanel>\r\n    </Host>;\r\n  }\r\n}\r\n\r\ninterface AutocompleteFetchParams {\r\n  filter: string\r\n}\r\n"],"version":3}