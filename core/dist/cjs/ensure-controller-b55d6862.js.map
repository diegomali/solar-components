{"file":"ensure-controller-b55d6862.js","mappings":";;;;;;;;;;;;;;;;AAIA;;;;;SAKgB,sBAAsB,CAAI,aAAa;;EAIrD,IAAI,MAAM,CAAC;EACX,IAAI,SAAS,CAAC;EAEd,OAAO,CAAC,KAAoE,EAAE,QAAyB;IACrG,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,KAAmB,KAAK,EAAnB,SAAS,UAAK,KAAK,EAA/D,gCAAuD,CAAQ,CAAC;IAEtE,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE;MACrB,aAAa,CAAC,MAAM,iCACb,KAAK,KACR,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE;UACnB,SAAS,GAAG,GAAG,CAAC;UAChB,OAAOA,QAAC,SAAS,oBAAK,SAAS,IAAE,GAAG,EAAE,GAAG,KAAG,QAAQ,CAAa,CAAC;SACnE,IACD;SACD,IAAI,CAAC,GAAG;QACP,IAAI,WAAW,EAAE;UAAE,WAAW,CAAC,GAAG,CAAC,CAAC;SAAE;QACtC,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC;OAC5B,CAAC,CAAC;KACN;SAAM,IAAI,CAAC,KAAK,EAAE;MACjB,MAAM,CAAC,SAAS,GAAGA,QAAC,SAAS,oBAAK,SAAS,GAAG,QAAQ,CAAa,CAAC;MACpE,MAAM,CAAC,WAAW,EAAE,CAAC;KACtB;SAAM;;MAEL,IAAI,MAAM,EAAE;QACV,IAAI,YAAY,EAAE;UAChB,YAAY,EAAE,CAAC;SAChB;QACD,MAAM,CAAC,MAAM,EAAE,CAAC;QAChB,MAAM,GAAG,IAAI,CAAC;OACf;KACF;;IAGD,OAAO,IAAI,CAAC;GACb,CAAC;AACJ;;MC9Cc,gBAAgB,GAAG,cAAc;EAC7C,IAAI,UAAU,GAAgB,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;EACrE,IAAIC,WAAK,CAAC,UAAU,CAAC,EAAE;IACrB,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IACpD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;GACvC;EACD,OAAO,UAAU,CAAC;AACpB;;;;;","names":["h","isNil"],"sources":["./src/behaviors/controller-behavior/create-controller-portal.tsx","./src/utils/stencil/ensure-controller.ts"],"sourcesContent":["import { FunctionalComponent, VNode, h } from '@stencil/core';\r\n\r\nimport { ControlledElementFields, ControllerComponentOptions } from './controller-behavior';\r\n\r\n/**\r\n * Used to create a Component that dispatch a ControllerComponent#set directly from a render tree.\r\n * This will pass the vchildren as a render function to the controller to render it through the portal.\r\n * @param controllerRef The reference of the controller element to dispatch.\r\n */\r\nexport function createControllerPortal<C>(controllerRef)\r\n  : FunctionalComponent<ControllerComponentOptions<C> & ControlledElementFields> {\r\n\r\n  // Controls the host created by the controller.\r\n  let portal;\r\n  let TargetTag;\r\n\r\n  return (props: ControllerComponentOptions<C> & ControlledElementFields | any, children: VNode | VNode[]) => {\r\n    const { ref: refCallback, reset, onDidDismiss, ...restProps } = props;\r\n\r\n    if (!portal && !reset) {\r\n      controllerRef.create({\r\n          ...props,\r\n          render: ({ ref, Tag }) => {\r\n            TargetTag = Tag;\r\n            return <TargetTag {...restProps} ref={ref}>{children}</TargetTag>;\r\n          }\r\n        })\r\n        .then(elt => {\r\n          if (refCallback) { refCallback(elt); }\r\n          portal = elt.parentElement;\r\n        });\r\n    } else if (!reset) {\r\n      portal.vchildren = <TargetTag {...restProps}>{children}</TargetTag>;\r\n      portal.forceUpdate();\r\n    } else {\r\n      // Clears the host if the reset prop is true\r\n      if (portal) {\r\n        if (onDidDismiss) {\r\n          onDidDismiss();\r\n        }\r\n        portal.remove();\r\n        portal = null;\r\n      }\r\n    }\r\n\r\n    // void component\r\n    return null;\r\n  };\r\n}\r\n","import { isNil } from 'ramda';\r\n\r\nexport const  ensureController = controllerName => {\r\n  let controller: HTMLElement = document.querySelector(controllerName);\r\n  if (isNil(controller)) {\r\n    controller = document.createElement(controllerName);\r\n    document.body.appendChild(controller);\r\n  }\r\n  return controller;\r\n}"],"version":3}