{"file":"transition-behavior-4d199749.js","mappings":";;;;;AAIA;;;;;;;MAOa,kBAAmB,SAAQA,mCAAsC;EAA9E;;IACE,mBAAc,GAAG,KAAK,CAAC;GA8CxB;;;;EAzCC,YAAY;IACVC,8BAAY,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,EAAE,OAAM,iBAAiB;MACvE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;MAC9D,MAAMC,iBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAACC,cAAI,EAAE,CAAC,CAAC;MAChD,IAAI,iBAAiB,EAAE;QAAE,OAAO,iBAAiB,EAAE,CAAC;OAAE;KACvD,CAAC,CAAC;GACJ;;;;;EAMD,MAAM,MAAM;IACV,IAAI,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;MAAE,MAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;KAAE;IACrF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,0BAA0B,EAAE,yBAAyB,CAAC,CAAC;;;IAI7F,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC7D;EAED,MAAM,MAAK;;;;EAKX,MAAM,cAAc;IAClB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;MACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;;MAG3B,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,yBAAyB,CAAC,CAAC;MAC1F,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;MAExE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;MAC9D,IAAI,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;QAAE,MAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;OAAE;MAErF,MAAMD,iBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAACC,cAAI,EAAE,CAAC,CAAC;MAChD,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACrD;GACF;;;;;","names":["ComponentBehavior","extendMethod","animate","wait"],"sources":["./src/behaviors/transition-behavior.ts"],"sourcesContent":["import { animate, wait } from '../utils/animation';\r\nimport { extendMethod } from '../utils/lang/extend-method';\r\nimport { ComponentBase, ComponentBehavior } from '../utils/stencil/component-behavior';\r\n\r\n/**\r\n * Implements hooks to control the transitions states, such as entering and leaving.\r\n * Useful for CSS animations. CSS classes are provided, controlled by it state:\r\n * - `transition--before-enter` The state before the component enters on the screen.\r\n * - `transition--after-enter` The state after the component enters on the screen.\r\n * - `transition--before-leave` The state before the component leave the screen.\r\n */\r\nexport class TransitionBehavior extends ComponentBehavior<TransitionComponent> {\r\n  removeIsQueued = false;\r\n\r\n  /**\r\n   * Applies a mokeypatch of componentWillLoad to add the transition hooks. Also, it dispatch the CSS transitions.\r\n   */\r\n  beforeAttach() {\r\n    extendMethod(this.component, 'componentWillLoad', async componentWillLoad => {\r\n      this.component.host.classList.add('transition--before-enter');\r\n      await animate(this.component.host).then(wait());\r\n      if (componentWillLoad) { return componentWillLoad(); }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute the componentWillEnter transition.\r\n   * Also, it applies a mokeypatch of the native Element#remove function to add the transition hooks.\r\n   */\r\n  async attach() {\r\n    if (this.component.componentWillEnter) { await this.component.componentWillEnter(); }\r\n    this.component.host.classList.replace('transition--before-enter', 'transition--after-enter');\r\n\r\n    // Monkeypatch native Element#remove.\r\n    // This function will wait for transitions.\r\n    this.component.host.remove = this.customRemoveFn.bind(this);\r\n  }\r\n\r\n  detach() {}\r\n\r\n  /**\r\n   * A custom remove teardown used to replace the native HTMLElement#remove, dispatching the CSS transitions.\r\n   */\r\n  async customRemoveFn() {\r\n    if (!this.removeIsQueued) {\r\n      this.removeIsQueued = true;\r\n\r\n      // Deep animations\r\n      const allChildren = this.component.host.getElementsByClassName('transition--after-enter');\r\n      await Promise.all(Array.from(allChildren).map(child => child.remove()));\r\n\r\n      this.component.host.classList.add('transition--before-leave');\r\n      if (this.component.componentWillLeave) { await this.component.componentWillLeave(); }\r\n\r\n      await animate(this.component.host).then(wait());\r\n      Element.prototype.remove.apply(this.component.host);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a Component that implements the Transition Behavior in it.\r\n */\r\nexport interface TransitionComponent extends ComponentBase {\r\n  /**\r\n   * The behavior instance itself applied to the component.\r\n   */\r\n  transitionBehavior: TransitionBehavior;\r\n\r\n  /**\r\n   * A hook dispatched when the component loads. Supporting async operations.\r\n   */\r\n  componentWillLoad: () => Promise<void> | void;\r\n\r\n  /**\r\n   * A hook dispatched when the component appears on the screen.\r\n   */\r\n  componentWillEnter?: () => Promise<any> | void;\r\n\r\n  /**\r\n   * A hook dispatched when the component leaves the screen.\r\n   */\r\n  componentWillLeave?: () => Promise<any> | void;\r\n}\r\n"],"version":3}